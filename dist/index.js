(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Lib = require("./lib");
const show_1 = require("./show");
class Board {
    constructor(column, row, place) {
        this.column = column;
        this.row = row;
        this.place = place;
        this.init();
        this.placeCoord = {
            x: this.place.clientLeft,
            y: this.place.clientTop,
            width: this.place.clientWidth,
            height: this.place.clientHeight
        };
        this.show = new show_1.ShowSrv(this.place, { x: this.placeCoord.x, y: this.placeCoord.y }, { width: this.placeCoord.width, height: this.placeCoord.height }, { column: this.column, row: this.row });
        this.animate();
    }
    init() {
        this.cardsMap = [];
        for (let x = 0; x < this.column; x++) {
            let qtN = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            let tmpColumn = [];
            while (tmpColumn.length < 30) {
                const tmp = Lib.randomInt(1, 10);
                if (qtN[tmp - 1] < 3) {
                    tmpColumn.push(tmp);
                    qtN[tmp - 1] += 1;
                }
            }
            this.cardsMap.push(tmpColumn);
        }
        // console.log(this.cardsMap);
    }
    showingData() {
        let result = [];
        for (let i = 0; i < this.column; i++) {
            let tmp = this.cardsMap[i].slice(0, this.row);
            result.push(tmp);
        }
        return result;
    }
    tick(column) {
        if (column <= this.column) {
            let first = this.cardsMap[column - 1].shift();
            this.cardsMap[column - 1].push(first);
        }
    }
    animate() {
        this.show.showData(this.showingData());
    }
    refresh() {
        this.init();
        this.animate();
    }
    run(qt) {
        let promise = new Promise((resolve, reject) => {
            let count = 0;
            let timer = setInterval(() => {
                let from = Math.floor(count / qt) + 1;
                for (let i = from; i <= this.column; i++) {
                    this.tick(i);
                }
                this.animate();
                count += 1;
                if (count >= (qt * this.column)) {
                    clearInterval(timer);
                    resolve(true);
                }
            }, 40);
        });
        return promise.then(res => {
            return true;
        });
        // let count = 0;
        // let timer = setInterval(() => {
        //   let from = Math.floor(count / qt) + 1;
        //   for (let i = from; i <= this.column; i++) {
        //     this.tick(i);
        //   }
        //   this.animate();
        //   count += 1;
        //   if (count >= (qt * this.column)) {
        //     clearInterval(timer);
        //     return;
        //   }
        // }, 60);
    }
}
exports.Board = Board;


},{"./lib":4,"./show":5}],2:[function(require,module,exports){
// interface TestButton {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// }
class Button {
    constructor(id) {
        this.id = id;
        this.mode = {
            normal: './media/btn_spin_normal.png',
            hover: './media/btn_spin_hover.png',
            disable: './media/btn_spin_disable.png',
            press: './media/btn_spin_pressed.png'
        };
        this.elem = document.querySelector(`#${id}`);
        this.isDisable = false;
        this.init();
        this.elem.addEventListener('mouseover', this.hoverHandler.bind(this));
        this.elem.addEventListener('mouseout', this.noHoverHandler.bind(this));
        this.elem.addEventListener('click', this.changePressedFace.bind(this));
    }
    setDisable() {
        this.isDisable = true;
        this.elem.style.backgroundImage = `url(${this.mode.disable})`;
        this.elem.setAttribute('disabled', 'disabled');
        this.elem.style.cursor = 'not-allowed';
    }
    removeDisable() {
        this.isDisable = false;
        this.elem.style.backgroundImage = `url(${this.mode.normal})`;
        this.elem.removeAttribute('disabled');
        this.elem.style.cursor = 'pointer';
    }
    set clickHandler(listener) {
        if (!!this.clickHandlerFunc) {
            this.elem.removeEventListener('click', this.clickHandlerFunc);
        }
        this.clickHandlerFunc = listener;
        this.elem.addEventListener('click', this.clickHandlerFunc);
    }
    init() {
        this.elem.style.width = '80px';
        this.elem.style.height = '80px';
        this.elem.style.border = 'none';
        this.elem.style.borderRadius = '50%';
        this.elem.style.outlineWidth = '0';
        this.elem.style.cursor = 'pointer';
        this.elem.style.backgroundPosition = '50% 50%';
        this.elem.style.backgroundRepeat = 'no-repeat';
        this.elem.style.backgroundImage = `url(${this.mode.normal})`;
    }
    changePressedFace(event) {
        this.elem.style.backgroundImage = `url(${this.mode.press})`;
    }
    hoverHandler(event) {
        if (!this.isDisable) {
            this.elem.style.backgroundImage = `url(${this.mode.hover})`;
        }
    }
    noHoverHandler(event) {
        this.elem.style.backgroundImage = this.isDisable ? `url(${this.mode.disable})` : `url(${this.mode.normal})`;
    }
}
exports.Button = Button;


},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Lib = require("./lib");
const button_1 = require("./button");
const board_1 = require("./board");
const sound_1 = require("./sound");
(function () {
    const processSound = new sound_1.Sound('media/Reel_Spin.mp3');
    const stopSound = new sound_1.Sound('media/Landing_1.mp3');
    const main = document.querySelector('.place');
    const refreshBtn = document.querySelector('#refresh');
    const but = new button_1.Button('button');
    const board = new board_1.Board(5, 4, main);
    refreshBtn.addEventListener('click', () => {
        board.refresh();
    });
    but.clickHandler = () => {
        but.setDisable();
        refreshBtn.setAttribute('disabled', 'disabled');
        refreshBtn.style.cursor = 'not-allowed';
        processSound.play();
        const count = Lib.randomInt(5, 20);
        console.info(`Кол-во символов прокрутки: ${count}`);
        board.run(count)
            .then(res => {
            processSound.stop();
            setTimeout(() => {
                stopSound.play();
                but.removeDisable();
                refreshBtn.removeAttribute('disabled');
                refreshBtn.style.cursor = 'pointer';
            }, 50);
        });
    };
})();


},{"./board":1,"./button":2,"./lib":4,"./sound":6}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * функция округления с заданной точностью
 * @param num {number} - округляемое число
 * @param precision {number} - точность округления (количество знаков после запятой
 * указывается со знаком "-")
 * @return {number} - скорректированная округленная десятичная дробь
 */
function round(num, precission) {
    // Сдвиг разрядов
    let tmpNum = num.toString().split('e');
    tmpNum = Math.round(+(tmpNum[0] + 'e' + (tmpNum[1] ? (+tmpNum[1] - precission) : -precission)));
    // Обратный сдвиг
    tmpNum = tmpNum.toString().split('e');
    return +(tmpNum[0] + 'e' + (tmpNum[1] ? (+tmpNum[1] -
        +precission) : precission));
}
exports.round = round;
/**
 * функция генерации целого числа из диапазона
 * @param min {number}
 * @param max {number}
 * @return {number}
 */
function randomInt(min, max) {
    let rnd = min + Math.random() * (max + 1 - min);
    rnd = Math.floor(rnd);
    return rnd;
}
exports.randomInt = randomInt;


},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Lib = require("./lib");
class ShowSrv {
    constructor(parentElem, coord, size, qt) {
        this.parentElem = parentElem;
        this.coord = coord;
        this.size = size;
        this.qt = qt;
        this.init();
    }
    init() {
        this.cellSize = {
            width: Lib.round(this.size.width / this.qt.column, 0),
            height: Lib.round(this.size.height / this.qt.row, 0)
        };
        this.cellCoord = [];
        for (let x = 0; x < this.qt.column; x++) {
            let tmpColumn = [];
            for (let y = 0; y < this.qt.row; y++) {
                let currentCellCoord = {
                    x: x * this.cellSize.width,
                    y: this.size.height - (y + 1) * this.cellSize.height
                };
                tmpColumn.push(currentCellCoord);
            }
            this.cellCoord.push(tmpColumn);
        }
        // console.log(this.cellCoord);
    }
    showData(data) {
        if (data.length !== this.qt.column) {
            console.error(`Количество строк в передаваемых для отображения данных (${data.length}), превышает количество строк при инициализации класса Show (${this.qt.row})`);
            return false;
        }
        if (data[0].length !== this.qt.row) {
            console.error(`Количество столбцов в передаваемых для отображения данных (${data[0].length}), превышает количество столбцов при инициализации класса Show (${this.qt.column})`);
            return false;
        }
        this.cleanElement(this.parentElem);
        for (let x = 0; x < this.qt.column; x++) {
            for (let y = 0; y < this.qt.row; y++) {
                let cellElem = document.createElement('div');
                cellElem.style.position = 'absolute';
                cellElem.style.width = `${this.cellSize.width}px`;
                cellElem.style.height = `${this.cellSize.height}px`;
                cellElem.style.top = `${this.cellCoord[x][y].y}px`;
                cellElem.style.left = `${this.cellCoord[x][y].x}px`;
                let path = `media/${(data[x][y] < 10) ? '0' + data[x][y] : data[x][y]}.png`;
                cellElem.style.backgroundPosition = '50% 50%';
                cellElem.style.backgroundRepeat = 'no-repeat';
                cellElem.style.backgroundSize = 'contain';
                cellElem.style.backgroundImage = `url(${path})`;
                this.parentElem.appendChild(cellElem);
            }
        }
    }
    /**
     * очистка "родителя" от все дочерних элементов
     * @param elem {Element}
     */
    cleanElement(elem) {
        while (elem.childNodes[0]) {
            elem.removeChild(elem.childNodes[0]);
        }
    }
}
exports.ShowSrv = ShowSrv;


},{"./lib":4}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Sound {
    constructor(pathFile) {
        this.pathFile = pathFile;
        this.init();
    }
    init() {
        this.context = new AudioContext();
        this.loadSoundFile();
    }
    loadSoundFile() {
        let xhr = new XMLHttpRequest();
        xhr.open('GET', this.pathFile, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = (ev) => {
            let res = xhr.response;
            this.context.decodeAudioData(res, (decodedArrayBuffer) => {
                this.buffer = decodedArrayBuffer;
            }, (err) => { console.error(err); });
        };
        xhr.send();
    }
    play() {
        this.source = this.context.createBufferSource();
        this.source.buffer = this.buffer;
        this.destination = this.context.destination;
        this.source.connect(this.destination);
        this.source.start(0);
    }
    stop() {
        this.source.stop(0);
    }
}
exports.Sound = Sound;


},{}]},{},[3])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYm9hcmQudHMiLCJzcmMvYnV0dG9uLnRzIiwic3JjL2luZGV4LnRzIiwic3JjL2xpYi50cyIsInNyYy9zaG93LnRzIiwic3JjL3NvdW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQSw2QkFBNkI7QUFDN0IsaUNBQWlDO0FBRWpDO0lBTUUsWUFDVSxNQUFjLEVBQ2QsR0FBVyxFQUNYLEtBQWM7UUFGZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsUUFBRyxHQUFILEdBQUcsQ0FBUTtRQUNYLFVBQUssR0FBTCxLQUFLLENBQVM7UUFFdEIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1osSUFBSSxDQUFDLFVBQVUsR0FBRztZQUNoQixDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVO1lBQ3hCLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVM7WUFDdkIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVztZQUM3QixNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZO1NBQ2hDLENBQUM7UUFDRixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksY0FBTyxDQUNyQixJQUFJLENBQUMsS0FBSyxFQUNWLEVBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBQyxFQUM1QyxFQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUMsRUFDOUQsRUFBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBQyxDQUNyQyxDQUFDO1FBQ0YsSUFBSSxDQUFDLE9BQU8sRUFBRSxD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QyxDQUFDLENBQUMsQ0FBQztJQUN0QixDQUFDO0NBRUY7QUExQ0Qsc0JBMENDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJpbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi9saWInO1xuaW1wb3J0IHsgU2hvd1NydiB9IGZyb20gJy4vc2hvdyc7XG5cbmV4cG9ydCBjbGFzcyBCb2FyZCB7XG4gIHByaXZhdGUgY2FyZHNNYXA6IG51bWJlcltdW107XG4gIHByaXZhdGUgcGxhY2VDb29yZDogdGVzdC5HZW9tZXRyaWM7XG4gIHByaXZhdGUgc2hvdzogU2hvd1NydjtcblxuXG4gIGNvbnN0cnVjdG9yIChcbiAgICBwcml2YXRlIGNvbHVtbjogbnVtYmVyLFxuICAgIHByaXZhdGUgcm93OiBudW1iZXIsXG4gICAgcHJpdmF0ZSBwbGFjZTogRWxlbWVudFxuICAgKSB7XG4gICAgdGhpcy5pbml0KCk7XG4gICAgdGhpcy5wbGFjZUNvb3JkID0ge1xuICAgICAgeDogdGhpcy5wbGFjZS5jbGllbnRMZWZ0LFxuICAgICAgeTogdGhpcy5wbGFjZS5jbGllbnRUb3AsXG4gICAgICB3aWR0aDogdGhpcy5wbGFjZS5jbGllbnRXaWR0aCxcbiAgICAgIGhlaWdodDogdGhpcy5wbGFjZS5jbGllbnRIZWlnaHRcbiAgICB9O1xuICAgIHRoaXMuc2hvdyA9IG5ldyBTaG93U3J2KFxuICAgICAgdGhpcy5wbGFjZSxcbiAgICAgIHt4OiB0aGlzLnBsYWNlQ29vcmQueCwgeTogdGhpcy5wbGFjZUNvb3JkLnl9LFxuICAgICAge3dpZHRoOiB0aGlzLnBsYWNlQ29vcmQud2lkdGgsIGhlaWdodDogdGhpcy5wbGFjZUNvb3JkLmhlaWdodH0sXG4gICAgICB7Y29sdW1uOiB0aGlzLmNvbHVtbiwgcm93OiB0aGlzLnJvd31cbiAgICApO1xuICAgIHRoaXMuYW5pbWF0ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0KCk6IHZvaWQge1xuICAgIHRoaXMuY2FyZHNNYXAgPSBbXTtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMuY29sdW1uOyB4KyspIHtcbiAgICAgIGxldCBxdE4gPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF07XG4gICAgICBsZXQgdG1wQ29sdW1uID0gW107XG4gICAgICB3aGlsZSAodG1wQ29sdW1uLmxlbmd0aCA8IDMwKSB7XG4gICAgICAgIGNvbnN0IHRtcCA9IExpYi5yYW5kb21JbnQoMSwgMTApO1xuICAgICAgICBpZiAocXROW3RtcCAtIDFdIDwgMykge1xuICAgICAgICAgIHRtcENvbHVtbi5wdXNoKHRtcCk7XG4gICAgICAgICAgcXROW3RtcCAtIDFdICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuY2FyZHNNYXAucHVzaCh0bXBDb2x1bW4pO1xuICAgIH1cbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmNhcmRzTWFwKTtcbiAgfVxuXG5cbiAgcHJpdmF0ZSBzaG93aW5nRGF0YSgpOiBudW1iZXJbXVtdIHtcbiAgICBsZXQgcmVzdWx0OiBudW1iZXJbXVtdID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbHVtbjsgaSsrKSB7XG4gICAgICBsZXQgdG1wID0gdGhpcy5jYXJkc01hcFtpXS5zbGljZSgwLCB0aGlzLnJvdyk7XG4gICAgICByZXN1bHQucHVzaCh0bXApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cblxuICBwcml2YXRlIHRpY2soY29sdW1uOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoY29sdW1uIDw9IHRoaXMuY29sdW1uKSB7XG4gICAgICBsZXQgZmlyc3QgPSB0aGlzLmNhcmRzTWFwW2NvbHVtbiAtIDFdLnNoaWZ0KCk7XG4gICAgICB0aGlzLmNhcmRzTWFwW2NvbHVtbiAtIDFdLnB1c2goZmlyc3QpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYW5pbWF0ZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNob3cuc2hvd0RhdGEodGhpcy5zaG93aW5nRGF0YSgpKTtcbiAgfVxuXG4gIHB1YmxpYyByZWZyZXNoKCk6IHZvaWQge1xuICAgIHRoaXMuaW5pdCgpO1xuICAgIHRoaXMuYW5pbWF0ZSgpO1xuICB9XG5cbiAgcHVibGljIHJ1bihxdDogbnVtYmVyKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZTxib29sZWFuPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGxldCBjb3VudCA9IDA7XG5cbiAgICAgIGxldCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgbGV0IGZyb20gPSBNYXRoLmZsb29yKGNvdW50IC8gcXQpICsgMTtcbiAgICAgICAgZm9yIChsZXQgaSA9IGZyb207IGkgPD0gdGhpcy5jb2x1bW47IGkrKykge1xuICAgICAgICAgIHRoaXMudGljayhpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFuaW1hdGUoKTtcbiAgXG4gICAgICAgIGNvdW50ICs9IDE7XG4gICAgICAgIGlmIChjb3VudCA+PSAocXQgKiB0aGlzLmNvbHVtbikpIHtcbiAgICAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9LCA0MCk7XG5cbiAgICB9KTtcblxuICAgIHJldHVybiBwcm9taXNlLnRoZW4ocmVzID0+IHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pXG5cblxuICAgIC8vIGxldCBjb3VudCA9IDA7XG5cbiAgICAvLyBsZXQgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgLy8gICBsZXQgZnJvbSA9IE1hdGguZmxvb3IoY291bnQgLyBxdCkgKyAxO1xuICAgIC8vICAgZm9yIChsZXQgaSA9IGZyb207IGkgPD0gdGhpcy5jb2x1bW47IGkrKykge1xuICAgIC8vICAgICB0aGlzLnRpY2soaSk7XG4gICAgLy8gICB9XG4gICAgLy8gICB0aGlzLmFuaW1hdGUoKTtcblxuICAgIC8vICAgY291bnQgKz0gMTtcbiAgICAvLyAgIGlmIChjb3VudCA+PSAocXQgKiB0aGlzLmNvbHVtbikpIHtcbiAgICAvLyAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gICAgLy8gICAgIHJldHVybjtcbiAgICAvLyAgIH1cbiAgICAvLyB9LCA2MCk7XG5cblxuXG4gIH1cbiAgICBcbiAgXG5cblxufSIsIi8vIGludGVyZmFjZSBUZXN0QnV0dG9uIHtcbiAgXG4vLyB9XG5cbmV4cG9ydCBjbGFzcyBCdXR0b24ge1xuICBwcml2YXRlIG1vZGU6IHtbbmFtZTogc3RyaW5nXTogc3RyaW5nfTtcbiAgcHJpdmF0ZSBlbGVtOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgcHJpdmF0ZSBjbGlja0hhbmRsZXJGdW5jOiBFdmVudExpc3RlbmVyO1xuICBwcml2YXRlIGlzRGlzYWJsZTogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvciAoXG4gICAgcHJpdmF0ZSBpZDogc3RyaW5nXG4gICkge1xuICAgIHRoaXMubW9kZSA9IHtcbiAgICAgIG5vcm1hbDogJy4vbWVkaWEvYnRuX3NwaW5fbm9ybWFsLnBuZycsXG4gICAgICBob3ZlcjogJy4vbWVkaWEvYnRuX3NwaW5faG92ZXIucG5nJyxcbiAgICAgIGRpc2FibGU6ICcuL21lZGlhL2J0bl9zcGluX2Rpc2FibGUucG5nJyxcbiAgICAgIHByZXNzOiAnLi9tZWRpYS9idG5fc3Bpbl9wcmVzc2VkLnBuZydcbiAgICB9O1xuICAgIHRoaXMuZWxlbSA9IDxIVE1MQnV0dG9uRWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtpZH1gKTtcbiAgICB0aGlzLmlzRGlzYWJsZSA9IGZhbHNlO1xuICAgIHRoaXMuaW5pdCgpO1xuICAgIFxuICAgIHRoaXMuZWxlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCB0aGlzLmhvdmVySGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsZW0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCB0aGlzLm5vSG92ZXJIYW5kbGVyLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZWxlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2hhbmdlUHJlc3NlZEZhY2UuYmluZCh0aGlzKSk7XG4gIH0gXG5cbiAgcHVibGljIHNldERpc2FibGUoKTogdm9pZCB7XG4gICAgdGhpcy5pc0Rpc2FibGUgPSB0cnVlO1xuICAgIHRoaXMuZWxlbS5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgdXJsKCR7dGhpcy5tb2RlLmRpc2FibGV9KWA7XG4gICAgdGhpcy5lbGVtLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICB0aGlzLmVsZW0uc3R5bGUuY3Vyc29yID0gJ25vdC1hbGxvd2VkJztcbiAgfVxuXG4gIHB1YmxpYyByZW1vdmVEaXNhYmxlKCk6IHZvaWQge1xuICAgIHRoaXMuaXNEaXNhYmxlID0gZmFsc2U7XG4gICAgdGhpcy5lbGVtLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IGB1cmwoJHt0aGlzLm1vZGUubm9ybWFsfSlgO1xuICAgIHRoaXMuZWxlbS5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gICAgdGhpcy5lbGVtLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgfVxuXG4gIHB1YmxpYyBzZXQgY2xpY2tIYW5kbGVyKGxpc3RlbmVyOiBFdmVudExpc3RlbmVyKSB7XG4gICAgaWYgKCEhdGhpcy5jbGlja0hhbmRsZXJGdW5jKSB7XG4gICAgICB0aGlzLmVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrSGFuZGxlckZ1bmMpO1xuICAgIH0gXG4gICAgdGhpcy5jbGlja0hhbmRsZXJGdW5jID0gbGlzdGVuZXI7XG4gICAgdGhpcy5lbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGlja0hhbmRsZXJGdW5jKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmVsZW0uc3R5bGUud2lkdGggPSAnODBweCc7XG4gICAgdGhpcy5lbGVtLnN0eWxlLmhlaWdodCA9ICc4MHB4JztcbiAgICB0aGlzLmVsZW0uc3R5bGUuYm9yZGVyID0gJ25vbmUnO1xuICAgIHRoaXMuZWxlbS5zdHlsZS5ib3JkZXJSYWRpdXMgPSAnNTAlJztcbiAgICB0aGlzLmVsZW0uc3R5bGUub3V0bGluZVdpZHRoID0gJzAnO1xuICAgIHRoaXMuZWxlbS5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XG4gICAgdGhpcy5lbGVtLnN0eWxlLmJhY2tncm91bmRQb3NpdGlvbiA9ICc1MCUgNTAlJztcbiAgICB0aGlzLmVsZW0uc3R5bGUuYmFja2dyb3VuZFJlcGVhdCA9ICduby1yZXBlYXQnO1xuICAgIHRoaXMuZWxlbS5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgdXJsKCR7dGhpcy5tb2RlLm5vcm1hbH0pYDtcbiAgfVxuXG4gIHByaXZhdGUgY2hhbmdlUHJlc3NlZEZhY2UoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLmVsZW0uc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybCgke3RoaXMubW9kZS5wcmVzc30pYDtcbiAgfVxuXG4gIHByaXZhdGUgaG92ZXJIYW5kbGVyKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlzRGlzYWJsZSkge1xuICAgICAgdGhpcy5lbGVtLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IGB1cmwoJHt0aGlzLm1vZGUuaG92ZXJ9KWA7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBub0hvdmVySGFuZGxlcihldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIHRoaXMuZWxlbS5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSB0aGlzLmlzRGlzYWJsZSA/IGB1cmwoJHt0aGlzLm1vZGUuZGlzYWJsZX0pYCA6IGB1cmwoJHt0aGlzLm1vZGUubm9ybWFsfSlgO1xuICB9XG5cbn0iLCJpbXBvcnQgKiBhcyBMaWIgZnJvbSAnLi9saWInO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnLi9idXR0b24nO1xuaW1wb3J0IHsgQm9hcmQgfSBmcm9tICcuL2JvYXJkJztcbmltcG9ydCB7IFNvdW5kIH0gZnJvbSAnLi9zb3VuZCc7XG5cbihmdW5jdGlvbigpIHtcbiAgY29uc3QgcHJvY2Vzc1NvdW5kID0gbmV3IFNvdW5kKCdtZWRpYS9SZWVsX1NwaW4ubXAzJyk7XG4gIGNvbnN0IHN0b3BTb3VuZCA9IG5ldyBTb3VuZCgnbWVkaWEvTGFuZGluZ18xLm1wMycpO1xuXG4gIGNvbnN0IG1haW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGxhY2UnKTtcbiAgY29uc3QgcmVmcmVzaEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyZWZyZXNoJyk7XG4gIGNvbnN0IGJ1dCA9IG5ldyBCdXR0b24oJ2J1dHRvbicpO1xuICBjb25zdCBib2FyZCA9IG5ldyBCb2FyZCg1LCA0LCBtYWluKTtcblxuICByZWZyZXNoQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGJvYXJkLnJlZnJlc2goKTtcbiAgfSk7XG5cbiAgYnV0LmNsaWNrSGFuZGxlciA9ICgpID0+IHtcbiAgICBidXQuc2V0RGlzYWJsZSgpO1xuICAgIHJlZnJlc2hCdG4uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICAgIChyZWZyZXNoQnRuIGFzIEhUTUxCdXR0b25FbGVtZW50KS5zdHlsZS5jdXJzb3IgPSAnbm90LWFsbG93ZWQnO1xuICAgIHByb2Nlc3NTb3VuZC5wbGF5KCk7XG5cbiAgICBjb25zdCBjb3VudCA9IExpYi5yYW5kb21JbnQoNSwgMjApO1xuICAgIGNvbnNvbGUuaW5mbyhg0JrQvtC7LdCy0L4g0YHQuNC80LLQvtC70L7QsiDQv9GA0L7QutGA0YPRgtC60Lg6ICR7Y291bnR9YCk7XG5cbiAgICBib2FyZC5ydW4oY291bnQpXG4gICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICBwcm9jZXNzU291bmQuc3RvcCgpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBzdG9wU291bmQucGxheSgpO1xuICAgICAgICAgIGJ1dC5yZW1vdmVEaXNhYmxlKCk7XG4gICAgICAgICAgcmVmcmVzaEJ0bi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgKHJlZnJlc2hCdG4gYXMgSFRNTEJ1dHRvbkVsZW1lbnQpLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgfSwgNTApO1xuICAgICAgfSk7XG4gIH07XG4gIFxufSkoKTsiLCIvKipcbiAqINGE0YPQvdC60YbQuNGPINC+0LrRgNGD0LPQu9C10L3QuNGPINGBINC30LDQtNCw0L3QvdC+0Lkg0YLQvtGH0L3QvtGB0YLRjNGOXG4gKiBAcGFyYW0gbnVtIHtudW1iZXJ9IC0g0L7QutGA0YPQs9C70Y/QtdC80L7QtSDRh9C40YHQu9C+XG4gKiBAcGFyYW0gcHJlY2lzaW9uIHtudW1iZXJ9IC0g0YLQvtGH0L3QvtGB0YLRjCDQvtC60YDRg9Cz0LvQtdC90LjRjyAo0LrQvtC70LjRh9C10YHRgtCy0L4g0LfQvdCw0LrQvtCyINC/0L7RgdC70LUg0LfQsNC/0Y/RgtC+0LlcbiAqINGD0LrQsNC30YvQstCw0LXRgtGB0Y8g0YHQviDQt9C90LDQutC+0LwgXCItXCIpXG4gKiBAcmV0dXJuIHtudW1iZXJ9IC0g0YHQutC+0YDRgNC10LrRgtC40YDQvtCy0LDQvdC90LDRjyDQvtC60YDRg9Cz0LvQtdC90L3QsNGPINC00LXRgdGP0YLQuNGH0L3QsNGPINC00YDQvtCx0YxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kKG51bTogbnVtYmVyLCBwcmVjaXNzaW9uOiBudW1iZXIpOiBudW1iZXIge1xuICAvLyDQodC00LLQuNCzINGA0LDQt9GA0Y/QtNC+0LJcbiAgbGV0IHRtcE51bTphbnkgPSBudW0udG9TdHJpbmcoKS5zcGxpdCgnZScpO1xuICB0bXBOdW0gPSBNYXRoLnJvdW5kKCsodG1wTnVtWzBdICsgJ2UnICsgKHRtcE51bVsxXSA/ICgrdG1wTnVtWzFdIC0gcHJlY2lzc2lvbikgOiAtcHJlY2lzc2lvbikpKTtcbiAgLy8g0J7QsdGA0LDRgtC90YvQuSDRgdC00LLQuNCzXG4gIHRtcE51bSA9IHRtcE51bS50b1N0cmluZygpLnNwbGl0KCdlJyk7XG4gIHJldHVybiArKHRtcE51bVswXSArICdlJyArICh0bXBOdW1bMV0gPyAoK3RtcE51bVsxXSAtXG4gICsgcHJlY2lzc2lvbikgOiBwcmVjaXNzaW9uKSk7XG59XG5cbi8qKlxuICog0YTRg9C90LrRhtC40Y8g0LPQtdC90LXRgNCw0YbQuNC4INGG0LXQu9C+0LPQviDRh9C40YHQu9CwINC40Lcg0LTQuNCw0L/QsNC30L7QvdCwXG4gKiBAcGFyYW0gbWluIHtudW1iZXJ9XG4gKiBAcGFyYW0gbWF4IHtudW1iZXJ9XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21JbnQobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyIHtcbiAgbGV0IHJuZCA9IG1pbiArIE1hdGgucmFuZG9tKCkqIChtYXggKyAxIC0gbWluKTtcbiAgcm5kID0gTWF0aC5mbG9vcihybmQpO1xuICByZXR1cm4gcm5kO1xufSIsImltcG9ydCAqIGFzIExpYiBmcm9tICcuL2xpYic7XG5cbmV4cG9ydCBjbGFzcyBTaG93U3J2IHtcbiAgY2VsbFNpemU6IHRlc3QuU2l6ZTtcbiAgY2VsbENvb3JkOiB0ZXN0LkNvb3Jkc1tdW107XG5cbiAgY29uc3RydWN0b3IgKFxuICAgIHByaXZhdGUgcGFyZW50RWxlbTogRWxlbWVudCxcbiAgICBwcml2YXRlIGNvb3JkOiB0ZXN0LkNvb3JkcyxcbiAgICBwcml2YXRlIHNpemU6IHRlc3QuU2l6ZSxcbiAgICBwcml2YXRlIHF0OiB0ZXN0LkFtdFxuICApIHtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmNlbGxTaXplID0ge1xuICAgICAgd2lkdGg6IExpYi5yb3VuZCh0aGlzLnNpemUud2lkdGggLyB0aGlzLnF0LmNvbHVtbiwgMCksXG4gICAgICBoZWlnaHQ6IExpYi5yb3VuZCh0aGlzLnNpemUuaGVpZ2h0IC8gdGhpcy5xdC5yb3csIDApXG4gICAgfTtcbiAgICB0aGlzLmNlbGxDb29yZCA9IFtdO1xuICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy5xdC5jb2x1bW47IHgrKykge1xuICAgICAgbGV0IHRtcENvbHVtbjoge3g6IG51bWJlciwgeTogbnVtYmVyfVtdID0gW107XG4gICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMucXQucm93OyB5KyspIHtcbiAgICAgICAgbGV0IGN1cnJlbnRDZWxsQ29vcmQgPSB7XG4gICAgICAgICAgeDogeCAqIHRoaXMuY2VsbFNpemUud2lkdGgsXG4gICAgICAgICAgeTogdGhpcy5zaXplLmhlaWdodCAtICh5ICsgMSkgKiB0aGlzLmNlbGxTaXplLmhlaWdodFxuICAgICAgICB9O1xuICAgICAgICB0bXBDb2x1bW4ucHVzaChjdXJyZW50Q2VsbENvb3JkKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2VsbENvb3JkLnB1c2godG1wQ29sdW1uKTtcbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2codGhpcy5jZWxsQ29vcmQpO1xuICB9XG5cbiAgcHVibGljIHNob3dEYXRhKGRhdGE6IG51bWJlcltdW10pOiB2b2lkIHwgYm9vbGVhbiB7XG4gICAgaWYgKGRhdGEubGVuZ3RoICE9PSB0aGlzLnF0LmNvbHVtbikge1xuICAgICAgY29uc29sZS5lcnJvcihg0JrQvtC70LjRh9C10YHRgtCy0L4g0YHRgtGA0L7QuiDQsiDQv9C10YDQtdC00LDQstCw0LXQvNGL0YUg0LTQu9GPINC+0YLQvtCx0YDQsNC20LXQvdC40Y8g0LTQsNC90L3Ri9GFICgke2RhdGEubGVuZ3RofSksINC/0YDQtdCy0YvRiNCw0LXRgiDQutC+0LvQuNGH0LXRgdGC0LLQviDRgdGC0YDQvtC6INC/0YDQuCDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjQuCDQutC70LDRgdGB0LAgU2hvdyAoJHt0aGlzLnF0LnJvd30pYCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGRhdGFbMF0ubGVuZ3RoICE9PSB0aGlzLnF0LnJvdykge1xuICAgICAgY29uc29sZS5lcnJvcihg0JrQvtC70LjRh9C10YHRgtCy0L4g0YHRgtC+0LvQsdGG0L7QsiDQsiDQv9C10YDQtdC00LDQstCw0LXQvNGL0YUg0LTQu9GPINC+0YLQvtCx0YDQsNC20LXQvdC40Y8g0LTQsNC90L3Ri9GFICgke2RhdGFbMF0ubGVuZ3RofSksINC/0YDQtdCy0YvRiNCw0LXRgiDQutC+0LvQuNGH0LXRgdGC0LLQviDRgdGC0L7Qu9Cx0YbQvtCyINC/0YDQuCDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjQuCDQutC70LDRgdGB0LAgU2hvdyAoJHt0aGlzLnF0LmNvbHVtbn0pYCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5jbGVhbkVsZW1lbnQodGhpcy5wYXJlbnRFbGVtKTtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMucXQuY29sdW1uOyB4KyspIHtcbiAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5xdC5yb3c7IHkrKykge1xuICAgICAgICBsZXQgY2VsbEVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY2VsbEVsZW0uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICBjZWxsRWxlbS5zdHlsZS53aWR0aCA9IGAke3RoaXMuY2VsbFNpemUud2lkdGh9cHhgO1xuICAgICAgICBjZWxsRWxlbS5zdHlsZS5oZWlnaHQgPSBgJHt0aGlzLmNlbGxTaXplLmhlaWdodH1weGA7XG4gICAgICAgIGNlbGxFbGVtLnN0eWxlLnRvcCA9IGAke3RoaXMuY2VsbENvb3JkW3hdW3ldLnl9cHhgO1xuICAgICAgICBjZWxsRWxlbS5zdHlsZS5sZWZ0ID0gYCR7dGhpcy5jZWxsQ29vcmRbeF1beV0ueH1weGA7XG4gICAgICAgIGxldCBwYXRoID0gYG1lZGlhLyR7KGRhdGFbeF1beV0gPCAxMCkgPyAnMCcgKyBkYXRhW3hdW3ldIDogZGF0YVt4XVt5XX0ucG5nYDtcbiAgICAgICAgY2VsbEVsZW0uc3R5bGUuYmFja2dyb3VuZFBvc2l0aW9uID0gJzUwJSA1MCUnO1xuICAgICAgICBjZWxsRWxlbS5zdHlsZS5iYWNrZ3JvdW5kUmVwZWF0ID0gJ25vLXJlcGVhdCc7XG4gICAgICAgIGNlbGxFbGVtLnN0eWxlLmJhY2tncm91bmRTaXplID0gJ2NvbnRhaW4nO1xuICAgICAgICBjZWxsRWxlbS5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgdXJsKCR7cGF0aH0pYDtcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtLmFwcGVuZENoaWxkKGNlbGxFbGVtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog0L7Rh9C40YHRgtC60LAgXCLRgNC+0LTQuNGC0LXQu9GPXCIg0L7RgiDQstGB0LUg0LTQvtGH0LXRgNC90LjRhSDRjdC70LXQvNC10L3RgtC+0LJcbiAgICogQHBhcmFtIGVsZW0ge0VsZW1lbnR9XG4gICAqL1xuICBwcml2YXRlIGNsZWFuRWxlbWVudChlbGVtOiBFbGVtZW50KTogdm9pZCB7XG4gICAgd2hpbGUgKGVsZW0uY2hpbGROb2Rlc1swXSkge1xuICAgICAgZWxlbS5yZW1vdmVDaGlsZChlbGVtLmNoaWxkTm9kZXNbMF0pO1xuICAgIH1cbiAgfVxuXG5cbn0iLCJleHBvcnQgY2xhc3MgU291bmQge1xuICBwcml2YXRlIGNvbnRleHQ6IEF1ZGlvQ29udGV4dDtcbiAgcHJpdmF0ZSBidWZmZXI6IEF1ZGlvQnVmZmVyO1xuICBwcml2YXRlIHNvdXJjZTogQXVkaW9CdWZmZXJTb3VyY2VOb2RlO1xuICBwcml2YXRlIGRlc3RpbmF0aW9uOiBBdWRpb0Rlc3RpbmF0aW9uTm9kZTtcblxuICBjb25zdHJ1Y3RvciAoXG4gICAgcHJpdmF0ZSBwYXRoRmlsZTogc3RyaW5nXG4gICkge1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG4gIFxuICBwcml2YXRlIGluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5jb250ZXh0ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xuICAgIHRoaXMubG9hZFNvdW5kRmlsZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBsb2FkU291bmRGaWxlKCk6IHZvaWQge1xuICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4aHIub3BlbignR0VUJywgdGhpcy5wYXRoRmlsZSwgdHJ1ZSk7XG4gICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gICAgeGhyLm9ubG9hZCA9IChldikgPT4ge1xuICAgICAgbGV0IHJlcyA9IHhoci5yZXNwb25zZTtcbiAgICAgIHRoaXMuY29udGV4dC5kZWNvZGVBdWRpb0RhdGEocmVzLCAoZGVjb2RlZEFycmF5QnVmZmVyKSA9PiB7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gZGVjb2RlZEFycmF5QnVmZmVyO1xuICAgICAgfSwgKGVycikgPT4geyBjb25zb2xlLmVycm9yKGVycik7IH0pO1xuICAgIH1cbiAgICB4aHIuc2VuZCgpO1xuICB9XG5cbiAgcHVibGljIHBsYXkoKTogdm9pZCB7XG4gICAgdGhpcy5zb3VyY2UgPSB0aGlzLmNvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XG4gICAgdGhpcy5zb3VyY2UuYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgdGhpcy5kZXN0aW5hdGlvbiA9IHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbjtcbiAgICB0aGlzLnNvdXJjZS5jb25uZWN0KHRoaXMuZGVzdGluYXRpb24pO1xuICAgIHRoaXMuc291cmNlLnN0YXJ0KDApO1xuICB9XG5cbiAgcHVibGljIHN0b3AoKTogdm9pZCB7XG4gICAgdGhpcy5zb3VyY2Uuc3RvcCgwKTtcbiAgfVxuXG59Il0sInByZUV4aXN0aW5nQ29tbWVudCI6Ii8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlMWEJoWTJzdlgzQnlaV3gxWkdVdWFuTWlMQ0p6Y21NdlltOWhjbVF1ZEhNaUxDSnpjbU12WW5WMGRHOXVMblJ6SWl3aWMzSmpMMmx1WkdWNExuUnpJaXdpYzNKakwyeHBZaTUwY3lJc0luTnlZeTl6YUc5M0xuUnpJaXdpYzNKakwzTnZkVzVrTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPenM3UVVOQlFTdzJRa0ZCTmtJN1FVRkROMElzYVVOQlFXbERPMEZCUldwRE8wbEJUVVVzV1VGRFZTeE5RVUZqTEVWQlEyUXNSMEZCVnl4RlFVTllMRXRCUVdNN1VVRkdaQ3hYUVVGTkxFZEJRVTRzVFVGQlRTeERRVUZSTzFGQlEyUXNVVUZCUnl4SFFVRklMRWRCUVVjc1EwRkJVVHRSUVVOWUxGVkJRVXNzUjBGQlRDeExRVUZMTEVOQlFWTTdVVUZGZEVJc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETzFGQlExb3NTVUZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSenRaUVVOb1FpeERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhWUVVGVk8xbEJRM2hDTEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk03V1VGRGRrSXNTMEZCU3l4RlFVRkZMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVjBGQlZ6dFpRVU0zUWl4TlFVRk5MRVZCUVVVc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFpRVUZaTzFOQlEyaERMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NZMEZCVHl4RFFVTnlRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVU5XTEVWQlFVTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUlVGQlF5eEZRVU0xUXl4RlFVRkRMRXRCUVVzc1JVRkJSU3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEV0QlFVc3NSVUZCUlN4TlFVRk5MRVZCUVVVc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eE5RVUZOTEVWQlFVTXNSVUZET1VRc1JVRkJReXhOUVVGTkxFVkJRVVVzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4SFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRExFZEJRVWNzUlVGQlF5eERRVU55UXl4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETzBsQlEycENMRU5CUVVNN1NVRkZUeXhKUVVGSk8xRkJRMVlzU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkRia0lzUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU03V1VGRGNrTXNTVUZCU1N4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU42UXl4SlFVRkpMRk5CUVZNc1IwRkJSeXhGUVVGRkxFTkJRVU03V1VGRGJrSXNUMEZCVHl4VFFVRlRMRU5CUVVNc1RVRkJUU3hIUVVGSExFVkJRVVVzUlVGQlJTeERRVUZETzJkQ1FVTTNRaXhOUVVGTkxFZEJRVWNzUjBGQlJ5eEhRVUZITEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dG5Ra0ZEYWtNc1JVRkJSU3hEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTnlRaXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMjlDUVVOd1FpeEhRVUZITEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dG5Ra0ZEY0VJc1EwRkJRenRaUVVOSUxFTkJRVU03V1VGRFJDeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dFJRVU5vUXl4RFFVRkRPMUZCUTBRc09FSkJRVGhDTzBsQlEyaERMRU5CUVVNN1NVRkhUeXhYUVVGWE8xRkJRMnBDTEVsQlFVa3NUVUZCVFN4SFFVRmxMRVZCUVVVc1EwRkJRenRSUVVNMVFpeEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF6dFpRVU55UXl4SlFVRkpMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMWxCUXpsRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRia0lzUTBGQlF6dFJRVU5FTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNN1NVRkRhRUlzUTBGQlF6dEpRVWRQTEVsQlFVa3NRMEZCUXl4TlFVRmpPMUZCUTNwQ0xFVkJRVVVzUTBGQlF5eERRVUZETEUxQlFVMHNTVUZCU1N4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU14UWl4SlFVRkpMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dFpRVU01UXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03VVVGRGVFTXNRMEZCUXp0SlFVTklMRU5CUVVNN1NVRkZUeXhQUVVGUE8xRkJRMklzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZETEVOQlFVTTdTVUZEZWtNc1EwRkJRenRKUVVWTkxFOUJRVTg3VVVGRFdpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1VVRkRXaXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdTVUZEYWtJc1EwRkJRenRKUVVWTkxFZEJRVWNzUTBGQlF5eEZRVUZWTzFGQlEyNUNMRWxCUVVrc1QwRkJUeXhIUVVGSExFbEJRVWtzVDBGQlR5eERRVUZWTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTFCUVUwN1dVRkZha1FzU1VGQlNTeExRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRkRPMWxCUldRc1NVRkJTU3hMUVVGTExFZEJRVWNzVjBGQlZ5eERRVUZETzJkQ1FVTjBRaXhKUVVGSkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1IwRkJSeXhGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdaMEpCUTNSRExFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRWxCUVVrc1JVRkJSU3hEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRE8yOUNRVU42UXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTm1MRU5CUVVNN1owSkJRMFFzU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRPMmRDUVVWbUxFdEJRVXNzU1VGQlNTeERRVUZETEVOQlFVTTdaMEpCUTFnc1JVRkJSU3hEUVVGRExFTkJRVU1zUzBGQlN5eEpRVUZKTEVOQlFVTXNSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdiMEpCUTJoRExHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0dlFrRkRja0lzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMmRDUVVOb1FpeERRVUZETzFsQlEwZ3NRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJSVlFzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZGU0N4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITzFsQlEzSkNMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU03VVVGRFpDeERRVUZETEVOQlFVTXNRMEZCUVR0UlFVZEdMR2xDUVVGcFFqdFJRVVZxUWl4clEwRkJhME03VVVGRGJFTXNNa05CUVRKRE8xRkJRek5ETEdkRVFVRm5SRHRSUVVOb1JDeHZRa0ZCYjBJN1VVRkRjRUlzVFVGQlRUdFJRVU5PTEc5Q1FVRnZRanRSUVVWd1FpeG5Ra0ZCWjBJN1VVRkRhRUlzZFVOQlFYVkRPMUZCUTNaRExEUkNRVUUwUWp0UlFVTTFRaXhqUVVGak8xRkJRMlFzVFVGQlRUdFJRVU5PTEZWQlFWVTdTVUZKV2l4RFFVRkRPME5CUzBZN1FVRjRTRVFzYzBKQmQwaERPenM3TzBGRE0waEVMSGxDUVVGNVFqczdPMEZCUlhwQ0xFbEJRVWs3UVVGRlNqdEpRVTFGTEZsQlExVXNSVUZCVlR0UlFVRldMRTlCUVVVc1IwRkJSaXhGUVVGRkxFTkJRVkU3VVVGRmJFSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSenRaUVVOV0xFMUJRVTBzUlVGQlJTdzJRa0ZCTmtJN1dVRkRja01zUzBGQlN5eEZRVUZGTERSQ1FVRTBRanRaUVVOdVF5eFBRVUZQTEVWQlFVVXNPRUpCUVRoQ08xbEJRM1pETEV0QlFVc3NSVUZCUlN3NFFrRkJPRUk3VTBGRGRFTXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRWE5DTEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1NVRkJTU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzFGQlEyaEZMRWxCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzUzBGQlN5eERRVUZETzFGQlEzWkNMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dFJRVVZhTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNWMEZCVnl4RlFVRkZMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRkRVVzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eFZRVUZWTEVWQlFVVXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTjJSU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRla1VzUTBGQlF6dEpRVVZOTEZWQlFWVTdVVUZEWml4SlFVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF6dFJRVU4wUWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eGxRVUZsTEVkQlFVY3NUMEZCVHl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eERRVUZETzFGQlF6bEVMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEZWQlFWVXNSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJRenRSUVVNdlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFZEJRVWNzWVVGQllTeERRVUZETzBsQlEzcERMRU5CUVVNN1NVRkZUU3hoUVVGaE8xRkJRMnhDTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1MwRkJTeXhEUVVGRE8xRkJRM1pDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExHVkJRV1VzUjBGQlJ5eFBRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU03VVVGRE4wUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdVVUZEZEVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRk5CUVZNc1EwRkJRenRKUVVOeVF5eERRVUZETzBsQlJVUXNTVUZCVnl4WlFVRlpMRU5CUVVNc1VVRkJkVUk3VVVGRE4wTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRE5VSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNN1VVRkRhRVVzUTBGQlF6dFJRVU5FTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUjBGQlJ5eFJRVUZSTEVOQlFVTTdVVUZEYWtNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03U1VGRE4wUXNRMEZCUXp0SlFVVlBMRWxCUVVrN1VVRkRWaXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRWRCUVVjc1RVRkJUU3hEUVVGRE8xRkJReTlDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTTdVVUZEYUVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJRenRSUVVOb1F5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhaUVVGWkxFZEJRVWNzUzBGQlN5eERRVUZETzFGQlEzSkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZsQlFWa3NSMEZCUnl4SFFVRkhMRU5CUVVNN1VVRkRia01zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExGTkJRVk1zUTBGQlF6dFJRVU51UXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eHJRa0ZCYTBJc1IwRkJSeXhUUVVGVExFTkJRVU03VVVGREwwTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zWjBKQlFXZENMRWRCUVVjc1YwRkJWeXhEUVVGRE8xRkJReTlETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExHVkJRV1VzUjBGQlJ5eFBRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU03U1VGREwwUXNRMEZCUXp0SlFVVlBMR2xDUVVGcFFpeERRVUZETEV0QlFXbENPMUZCUTNwRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMR1ZCUVdVc1IwRkJSeXhQUVVGUExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRU5CUVVNN1NVRkRPVVFzUTBGQlF6dEpRVVZQTEZsQlFWa3NRMEZCUXl4TFFVRnBRanRSUVVOd1F5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEzQkNMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEdWQlFXVXNSMEZCUnl4UFFVRlBMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEVOQlFVTTdVVUZET1VRc1EwRkJRenRKUVVOSUxFTkJRVU03U1VGRlR5eGpRVUZqTEVOQlFVTXNTMEZCYVVJN1VVRkRkRU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1pVRkJaU3hIUVVGSExFbEJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NUMEZCVHl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eEhRVUZITEU5QlFVOHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF6dEpRVU01Unl4RFFVRkRPME5CUlVZN1FVRjRSVVFzZDBKQmQwVkRPenM3T3pzN1FVTTFSVVFzTmtKQlFUWkNPMEZCUXpkQ0xIRkRRVUZyUXp0QlFVTnNReXh0UTBGQlowTTdRVUZEYUVNc2JVTkJRV2RETzBGQlJXaERMRU5CUVVNN1NVRkRReXhOUVVGTkxGbEJRVmtzUjBGQlJ5eEpRVUZKTEdGQlFVc3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eERRVUZETzBsQlEzUkVMRTFCUVUwc1UwRkJVeXhIUVVGSExFbEJRVWtzWVVGQlN5eERRVUZETEhGQ1FVRnhRaXhEUVVGRExFTkJRVU03U1VGRmJrUXNUVUZCVFN4SlFVRkpMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0SlFVTTVReXhOUVVGTkxGVkJRVlVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8wbEJRM1JFTEUxQlFVMHNSMEZCUnl4SFFVRkhMRWxCUVVrc1pVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBsQlEycERMRTFCUVUwc1MwRkJTeXhIUVVGSExFbEJRVWtzWVVGQlN5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03U1VGRmNFTXNWVUZCVlN4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlR0UlFVTnVReXhMUVVGTExFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdTVUZEYkVJc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRlNDeEhRVUZITEVOQlFVTXNXVUZCV1N4SFFVRkhPMUZCUTJwQ0xFZEJRVWNzUTBGQlF5eFZRVUZWTEVWQlFVVXNRMEZCUXp0UlFVTnFRaXhWUVVGVkxFTkJRVU1zV1VGQldTeERRVUZETEZWQlFWVXNSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJRenRSUVVNdlF5eFZRVUZuUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFZEJRVWNzWVVGQllTeERRVUZETzFGQlF5OUVMRmxCUVZrc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dFJRVVZ3UWl4TlFVRk5MRXRCUVVzc1IwRkJSeXhIUVVGSExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOdVF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRGhDUVVFNFFpeExRVUZMTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUlhCRUxFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRPMkZCUTJJc1NVRkJTU3hEUVVGRExFZEJRVWM3V1VGRFVDeFpRVUZaTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1dVRkRjRUlzVlVGQlZTeERRVUZETzJkQ1FVTlVMRk5CUVZNc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dG5Ra0ZEYWtJc1IwRkJSeXhEUVVGRExHRkJRV0VzUlVGQlJTeERRVUZETzJkQ1FVTndRaXhWUVVGVkxFTkJRVU1zWlVGQlpTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMmRDUVVOMFF5eFZRVUZuUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFZEJRVWNzVTBGQlV5eERRVUZETzFsQlF6ZEVMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU5VTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTFBc1EwRkJReXhEUVVGRE8wRkJSVW9zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXpzN096czdPMEZEZGtOTU96czdPenM3UjBGTlJ6dEJRVU5JTEdWQlFYTkNMRWRCUVZjc1JVRkJSU3hWUVVGclFqdEpRVU51UkN4cFFrRkJhVUk3U1VGRGFrSXNTVUZCU1N4TlFVRk5MRWRCUVU4c1IwRkJSeXhEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVNelF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEyaEhMR2xDUVVGcFFqdEpRVU5xUWl4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVOMFF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eEhRVUZITEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRia1FzUTBGQlJTeFZRVUZWTEVOQlFVTXNSMEZCUnl4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJReTlDTEVOQlFVTTdRVUZTUkN4elFrRlJRenRCUVVWRU96czdPenRIUVV0SE8wRkJRMGdzYlVKQlFUQkNMRWRCUVZjc1JVRkJSU3hIUVVGWE8wbEJRMmhFTEVsQlFVa3NSMEZCUnl4SFFVRkhMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVkQlFVVXNRMEZCUXl4SFFVRkhMRWRCUVVjc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZETzBsQlF5OURMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUTNSQ0xFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTTdRVUZEWWl4RFFVRkRPMEZCU2tRc09FSkJTVU03T3pzN096dEJRek5DUkN3MlFrRkJOa0k3UVVGRk4wSTdTVUZKUlN4WlFVTlZMRlZCUVcxQ0xFVkJRMjVDTEV0QlFXdENMRVZCUTJ4Q0xFbEJRV1VzUlVGRFppeEZRVUZaTzFGQlNGb3NaVUZCVlN4SFFVRldMRlZCUVZVc1EwRkJVenRSUVVOdVFpeFZRVUZMTEVkQlFVd3NTMEZCU3l4RFFVRmhPMUZCUTJ4Q0xGTkJRVWtzUjBGQlNpeEpRVUZKTEVOQlFWYzdVVUZEWml4UFFVRkZMRWRCUVVZc1JVRkJSU3hEUVVGVk8xRkJSWEJDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJRenRKUVVOa0xFTkJRVU03U1VGRlR5eEpRVUZKTzFGQlExWXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSenRaUVVOa0xFdEJRVXNzUlVGQlJTeEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFpRVU55UkN4TlFVRk5MRVZCUVVVc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNN1UwRkRja1FzUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRM0JDTEVkQlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXp0WlFVTjRReXhKUVVGSkxGTkJRVk1zUjBGQk5rSXNSVUZCUlN4RFFVRkRPMWxCUXpkRExFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF6dG5Ra0ZEY2tNc1NVRkJTU3huUWtGQlowSXNSMEZCUnp0dlFrRkRja0lzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXM3YjBKQlF6RkNMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTFCUVUwN2FVSkJRM0pFTEVOQlFVTTdaMEpCUTBZc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRE8xbEJRMjVETEVOQlFVTTdXVUZEUkN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0UlFVTnFReXhEUVVGRE8xRkJRMFFzSzBKQlFTdENPMGxCUTJwRExFTkJRVU03U1VGRlRTeFJRVUZSTEVOQlFVTXNTVUZCWjBJN1VVRkRPVUlzUlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1MwRkJTeXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRia01zVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl3eVJFRkJNa1FzU1VGQlNTeERRVUZETEUxQlFVMHNaMFZCUVdkRkxFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVNc1EwRkJRenRaUVVOd1N5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRPMUZCUTJZc1EwRkJRenRSUVVWRUxFVkJRVVVzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFdEJRVXNzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMjVETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc09FUkJRVGhFTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxHMUZRVUZ0UlN4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTTdXVUZEYUV3c1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF6dFJRVU5tTEVOQlFVTTdVVUZGUkN4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0UlFVTnVReXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU03V1VGRGVFTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRPMmRDUVVOeVF5eEpRVUZKTEZGQlFWRXNSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzJkQ1FVTTNReXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNSMEZCUnl4VlFVRlZMRU5CUVVNN1owSkJRM0pETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRWxCUVVrc1EwRkJRenRuUWtGRGJFUXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1NVRkJTU3hEUVVGRE8yZENRVU53UkN4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNN1owSkJRMjVFTEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXp0blFrRkRjRVFzU1VGQlNTeEpRVUZKTEVkQlFVY3NVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNc1IwRkJSeXhIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRE8yZENRVU0xUlN4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExHdENRVUZyUWl4SFFVRkhMRk5CUVZNc1EwRkJRenRuUWtGRE9VTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhuUWtGQlowSXNSMEZCUnl4WFFVRlhMRU5CUVVNN1owSkJRemxETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1kwRkJZeXhIUVVGSExGTkJRVk1zUTBGQlF6dG5Ra0ZETVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eGxRVUZsTEVkQlFVY3NUMEZCVHl4SlFVRkpMRWRCUVVjc1EwRkJRenRuUWtGRGFFUXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhYUVVGWExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdXVUZEZUVNc1EwRkJRenRSUVVOSUxFTkJRVU03U1VGRFNDeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMHNzV1VGQldTeERRVUZETEVsQlFXRTdVVUZEYUVNc1QwRkJUeXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNN1dVRkRNVUlzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEZGtNc1EwRkJRenRKUVVOSUxFTkJRVU03UTBGSFJqdEJRVEZGUkN3d1FrRXdSVU03T3pzN096dEJRelZGUkR0SlFVMUZMRmxCUTFVc1VVRkJaMEk3VVVGQmFFSXNZVUZCVVN4SFFVRlNMRkZCUVZFc1EwRkJVVHRSUVVWNFFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1NVRkRaQ3hEUVVGRE8wbEJSVThzU1VGQlNUdFJRVU5XTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTU3haUVVGWkxFVkJRVVVzUTBGQlF6dFJRVU5zUXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hGUVVGRkxFTkJRVU03U1VGRGRrSXNRMEZCUXp0SlFVVlBMR0ZCUVdFN1VVRkRia0lzU1VGQlNTeEhRVUZITEVkQlFVY3NTVUZCU1N4alFVRmpMRVZCUVVVc1EwRkJRenRSUVVNdlFpeEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTNKRExFZEJRVWNzUTBGQlF5eFpRVUZaTEVkQlFVY3NZVUZCWVN4RFFVRkRPMUZCUTJwRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RlFVRkZPMWxCUTJRc1NVRkJTU3hIUVVGSExFZEJRVWNzUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZCUXp0WlFVTjJRaXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEdWQlFXVXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhyUWtGQmEwSTdaMEpCUTI1RUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NhMEpCUVd0Q0xFTkJRVU03V1VGRGJrTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhQUVVGUExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU4yUXl4RFFVRkRMRU5CUVVFN1VVRkRSQ3hIUVVGSExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTTdTVUZEWWl4RFFVRkRPMGxCUlUwc1NVRkJTVHRSUVVOVUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4RFFVRkRPMUZCUTJoRUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU03VVVGRGFrTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWY3NRMEZCUXp0UlFVTTFReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03VVVGRGRFTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEZGtJc1EwRkJRenRKUVVWTkxFbEJRVWs3VVVGRFZDeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU4wUWl4RFFVRkRPME5CUlVZN1FVRXhRMFFzYzBKQk1FTkRJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0Z1pTaDBMRzRzY2lsN1puVnVZM1JwYjI0Z2N5aHZMSFVwZTJsbUtDRnVXMjlkS1h0cFppZ2hkRnR2WFNsN2RtRnlJR0U5ZEhsd1pXOW1JSEpsY1hWcGNtVTlQVndpWm5WdVkzUnBiMjVjSWlZbWNtVnhkV2x5WlR0cFppZ2hkU1ltWVNseVpYUjFjbTRnWVNodkxDRXdLVHRwWmlocEtYSmxkSFZ5YmlCcEtHOHNJVEFwTzNaaGNpQm1QVzVsZHlCRmNuSnZjaWhjSWtOaGJtNXZkQ0JtYVc1a0lHMXZaSFZzWlNBblhDSXJieXRjSWlkY0lpazdkR2h5YjNjZ1ppNWpiMlJsUFZ3aVRVOUVWVXhGWDA1UFZGOUdUMVZPUkZ3aUxHWjlkbUZ5SUd3OWJsdHZYVDE3Wlhod2IzSjBjenA3ZlgwN2RGdHZYVnN3WFM1allXeHNLR3d1Wlhod2IzSjBjeXhtZFc1amRHbHZiaWhsS1h0MllYSWdiajEwVzI5ZFd6RmRXMlZkTzNKbGRIVnliaUJ6S0c0L2JqcGxLWDBzYkN4c0xtVjRjRzl5ZEhNc1pTeDBMRzRzY2lsOWNtVjBkWEp1SUc1YmIxMHVaWGh3YjNKMGMzMTJZWElnYVQxMGVYQmxiMllnY21WeGRXbHlaVDA5WENKbWRXNWpkR2x2Ymx3aUppWnlaWEYxYVhKbE8yWnZjaWgyWVhJZ2J6MHdPMjg4Y2k1c1pXNW5kR2c3YnlzcktYTW9jbHR2WFNrN2NtVjBkWEp1SUhOOUtTSXNJbWx0Y0c5eWRDQXFJR0Z6SUV4cFlpQm1jbTl0SUNjdUwyeHBZaWM3WEc1cGJYQnZjblFnZXlCVGFHOTNVM0oySUgwZ1puSnZiU0FuTGk5emFHOTNKenRjYmx4dVpYaHdiM0owSUdOc1lYTnpJRUp2WVhKa0lIdGNiaUFnY0hKcGRtRjBaU0JqWVhKa2MwMWhjRG9nYm5WdFltVnlXMTFiWFR0Y2JpQWdjSEpwZG1GMFpTQndiR0ZqWlVOdmIzSmtPaUIwWlhOMExrZGxiMjFsZEhKcFl6dGNiaUFnY0hKcGRtRjBaU0J6YUc5M09pQlRhRzkzVTNKMk8xeHVYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSWdLRnh1SUNBZ0lIQnlhWFpoZEdVZ1kyOXNkVzF1T2lCdWRXMWlaWElzWEc0Z0lDQWdjSEpwZG1GMFpTQnliM2M2SUc1MWJXSmxjaXhjYmlBZ0lDQndjbWwyWVhSbElIQnNZV05sT2lCRmJHVnRaVzUwWEc0Z0lDQXBJSHRjYmlBZ0lDQjBhR2x6TG1sdWFYUW9LVHRjYmlBZ0lDQjBhR2x6TG5Cc1lXTmxRMjl2Y21RZ1BTQjdYRzRnSUNBZ0lDQjRPaUIwYUdsekxuQnNZV05sTG1Oc2FXVnVkRXhsWm5Rc1hHNGdJQ0FnSUNCNU9pQjBhR2x6TG5Cc1lXTmxMbU5zYVdWdWRGUnZjQ3hjYmlBZ0lDQWdJSGRwWkhSb09pQjBhR2x6TG5Cc1lXTmxMbU5zYVdWdWRGZHBaSFJvTEZ4dUlDQWdJQ0FnYUdWcFoyaDBPaUIwYUdsekxuQnNZV05sTG1Oc2FXVnVkRWhsYVdkb2RGeHVJQ0FnSUgwN1hHNGdJQ0FnZEdocGN5NXphRzkzSUQwZ2JtVjNJRk5vYjNkVGNuWW9YRzRnSUNBZ0lDQjBhR2x6TG5Cc1lXTmxMRnh1SUNBZ0lDQWdlM2c2SUhSb2FYTXVjR3hoWTJWRGIyOXlaQzU0TENCNU9pQjBhR2x6TG5Cc1lXTmxRMjl2Y21RdWVYMHNYRzRnSUNBZ0lDQjdkMmxrZEdnNklIUm9hWE11Y0d4aFkyVkRiMjl5WkM1M2FXUjBhQ3dnYUdWcFoyaDBPaUIwYUdsekxuQnNZV05sUTI5dmNtUXVhR1ZwWjJoMGZTeGNiaUFnSUNBZ0lIdGpiMngxYlc0NklIUm9hWE11WTI5c2RXMXVMQ0J5YjNjNklIUm9hWE11Y205M2ZWeHVJQ0FnSUNrN1hHNGdJQ0FnZEdocGN5NWhibWx0WVhSbEtDazdYRzRnSUgxY2JseHVJQ0J3Y21sMllYUmxJR2x1YVhRb0tUb2dkbTlwWkNCN1hHNGdJQ0FnZEdocGN5NWpZWEprYzAxaGNDQTlJRnRkTzF4dUlDQWdJR1p2Y2lBb2JHVjBJSGdnUFNBd095QjRJRHdnZEdocGN5NWpiMngxYlc0N0lIZ3JLeWtnZTF4dUlDQWdJQ0FnYkdWMElIRjBUaUE5SUZzd0xDQXdMQ0F3TENBd0xDQXdMQ0F3TENBd0xDQXdMQ0F3TENBd1hUdGNiaUFnSUNBZ0lHeGxkQ0IwYlhCRGIyeDFiVzRnUFNCYlhUdGNiaUFnSUNBZ0lIZG9hV3hsSUNoMGJYQkRiMngxYlc0dWJHVnVaM1JvSUR3Z016QXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkRzF3SUQwZ1RHbGlMbkpoYm1SdmJVbHVkQ2d4TENBeE1DazdYRzRnSUNBZ0lDQWdJR2xtSUNoeGRFNWJkRzF3SUMwZ01WMGdQQ0F6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdkRzF3UTI5c2RXMXVMbkIxYzJnb2RHMXdLVHRjYmlBZ0lDQWdJQ0FnSUNCeGRFNWJkRzF3SUMwZ01WMGdLejBnTVR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2RHaHBjeTVqWVhKa2MwMWhjQzV3ZFhOb0tIUnRjRU52YkhWdGJpazdYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklHTnZibk52YkdVdWJHOW5LSFJvYVhNdVkyRnlaSE5OWVhBcE8xeHVJQ0I5WEc1Y2JseHVJQ0J3Y21sMllYUmxJSE5vYjNkcGJtZEVZWFJoS0NrNklHNTFiV0psY2x0ZFcxMGdlMXh1SUNBZ0lHeGxkQ0J5WlhOMWJIUTZJRzUxYldKbGNsdGRXMTBnUFNCYlhUdGNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElIUm9hWE11WTI5c2RXMXVPeUJwS3lzcElIdGNiaUFnSUNBZ0lHeGxkQ0IwYlhBZ1BTQjBhR2x6TG1OaGNtUnpUV0Z3VzJsZExuTnNhV05sS0RBc0lIUm9hWE11Y205M0tUdGNiaUFnSUNBZ0lISmxjM1ZzZEM1d2RYTm9LSFJ0Y0NrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJSDFjYmx4dVhHNGdJSEJ5YVhaaGRHVWdkR2xqYXloamIyeDFiVzQ2SUc1MWJXSmxjaWs2SUhadmFXUWdlMXh1SUNBZ0lHbG1JQ2hqYjJ4MWJXNGdQRDBnZEdocGN5NWpiMngxYlc0cElIdGNiaUFnSUNBZ0lHeGxkQ0JtYVhKemRDQTlJSFJvYVhNdVkyRnlaSE5OWVhCYlkyOXNkVzF1SUMwZ01WMHVjMmhwWm5Rb0tUdGNiaUFnSUNBZ0lIUm9hWE11WTJGeVpITk5ZWEJiWTI5c2RXMXVJQzBnTVYwdWNIVnphQ2htYVhKemRDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjSEpwZG1GMFpTQmhibWx0WVhSbEtDazZJSFp2YVdRZ2UxeHVJQ0FnSUhSb2FYTXVjMmh2ZHk1emFHOTNSR0YwWVNoMGFHbHpMbk5vYjNkcGJtZEVZWFJoS0NrcE8xeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklISmxabkpsYzJnb0tUb2dkbTlwWkNCN1hHNGdJQ0FnZEdocGN5NXBibWwwS0NrN1hHNGdJQ0FnZEdocGN5NWhibWx0WVhSbEtDazdYRzRnSUgxY2JseHVJQ0J3ZFdKc2FXTWdjblZ1S0hGME9pQnVkVzFpWlhJcE9pQlFjbTl0YVhObFBHSnZiMnhsWVc0K0lIdGNiaUFnSUNCc1pYUWdjSEp2YldselpTQTlJRzVsZHlCUWNtOXRhWE5sUEdKdmIyeGxZVzQrS0NoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUQwK0lIdGNibHh1SUNBZ0lDQWdiR1YwSUdOdmRXNTBJRDBnTUR0Y2JseHVJQ0FnSUNBZ2JHVjBJSFJwYldWeUlEMGdjMlYwU1c1MFpYSjJZV3dvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JzWlhRZ1puSnZiU0E5SUUxaGRHZ3VabXh2YjNJb1kyOTFiblFnTHlCeGRDa2dLeUF4TzF4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdabkp2YlRzZ2FTQThQU0IwYUdsekxtTnZiSFZ0YmpzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTUwYVdOcktHa3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZVzVwYldGMFpTZ3BPMXh1SUNCY2JpQWdJQ0FnSUNBZ1kyOTFiblFnS3owZ01UdGNiaUFnSUNBZ0lDQWdhV1lnS0dOdmRXNTBJRDQ5SUNoeGRDQXFJSFJvYVhNdVkyOXNkVzF1S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR05zWldGeVNXNTBaWEoyWVd3b2RHbHRaWElwTzF4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwc0lEUXdLVHRjYmx4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnY21WMGRYSnVJSEJ5YjIxcGMyVXVkR2hsYmloeVpYTWdQVDRnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlNsY2JseHVYRzRnSUNBZ0x5OGdiR1YwSUdOdmRXNTBJRDBnTUR0Y2JseHVJQ0FnSUM4dklHeGxkQ0IwYVcxbGNpQTlJSE5sZEVsdWRHVnlkbUZzS0NncElEMCtJSHRjYmlBZ0lDQXZMeUFnSUd4bGRDQm1jbTl0SUQwZ1RXRjBhQzVtYkc5dmNpaGpiM1Z1ZENBdklIRjBLU0FySURFN1hHNGdJQ0FnTHk4Z0lDQm1iM0lnS0d4bGRDQnBJRDBnWm5KdmJUc2dhU0E4UFNCMGFHbHpMbU52YkhWdGJqc2dhU3NyS1NCN1hHNGdJQ0FnTHk4Z0lDQWdJSFJvYVhNdWRHbGpheWhwS1R0Y2JpQWdJQ0F2THlBZ0lIMWNiaUFnSUNBdkx5QWdJSFJvYVhNdVlXNXBiV0YwWlNncE8xeHVYRzRnSUNBZ0x5OGdJQ0JqYjNWdWRDQXJQU0F4TzF4dUlDQWdJQzh2SUNBZ2FXWWdLR052ZFc1MElENDlJQ2h4ZENBcUlIUm9hWE11WTI5c2RXMXVLU2tnZTF4dUlDQWdJQzh2SUNBZ0lDQmpiR1ZoY2tsdWRHVnlkbUZzS0hScGJXVnlLVHRjYmlBZ0lDQXZMeUFnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQzh2SUNBZ2ZWeHVJQ0FnSUM4dklIMHNJRFl3S1R0Y2JseHVYRzVjYmlBZ2ZWeHVJQ0FnSUZ4dUlDQmNibHh1WEc1OUlpd2lMeThnYVc1MFpYSm1ZV05sSUZSbGMzUkNkWFIwYjI0Z2UxeHVJQ0JjYmk4dklIMWNibHh1Wlhod2IzSjBJR05zWVhOeklFSjFkSFJ2YmlCN1hHNGdJSEJ5YVhaaGRHVWdiVzlrWlRvZ2UxdHVZVzFsT2lCemRISnBibWRkT2lCemRISnBibWQ5TzF4dUlDQndjbWwyWVhSbElHVnNaVzA2SUVoVVRVeENkWFIwYjI1RmJHVnRaVzUwTzF4dUlDQndjbWwyWVhSbElHTnNhV05yU0dGdVpHeGxja1oxYm1NNklFVjJaVzUwVEdsemRHVnVaWEk3WEc0Z0lIQnlhWFpoZEdVZ2FYTkVhWE5oWW14bE9pQmliMjlzWldGdU8xeHVYRzRnSUdOdmJuTjBjblZqZEc5eUlDaGNiaUFnSUNCd2NtbDJZWFJsSUdsa09pQnpkSEpwYm1kY2JpQWdLU0I3WEc0Z0lDQWdkR2hwY3k1dGIyUmxJRDBnZTF4dUlDQWdJQ0FnYm05eWJXRnNPaUFuTGk5dFpXUnBZUzlpZEc1ZmMzQnBibDl1YjNKdFlXd3VjRzVuSnl4Y2JpQWdJQ0FnSUdodmRtVnlPaUFuTGk5dFpXUnBZUzlpZEc1ZmMzQnBibDlvYjNabGNpNXdibWNuTEZ4dUlDQWdJQ0FnWkdsellXSnNaVG9nSnk0dmJXVmthV0V2WW5SdVgzTndhVzVmWkdsellXSnNaUzV3Ym1jbkxGeHVJQ0FnSUNBZ2NISmxjM002SUNjdUwyMWxaR2xoTDJKMGJsOXpjR2x1WDNCeVpYTnpaV1F1Y0c1bkoxeHVJQ0FnSUgwN1hHNGdJQ0FnZEdocGN5NWxiR1Z0SUQwZ1BFaFVUVXhDZFhSMGIyNUZiR1Z0Wlc1MFBtUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvWUNNa2UybGtmV0FwTzF4dUlDQWdJSFJvYVhNdWFYTkVhWE5oWW14bElEMGdabUZzYzJVN1hHNGdJQ0FnZEdocGN5NXBibWwwS0NrN1hHNGdJQ0FnWEc0Z0lDQWdkR2hwY3k1bGJHVnRMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMjF2ZFhObGIzWmxjaWNzSUhSb2FYTXVhRzkyWlhKSVlXNWtiR1Z5TG1KcGJtUW9kR2hwY3lrcE8xeHVJQ0FnSUhSb2FYTXVaV3hsYlM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkdGIzVnpaVzkxZENjc0lIUm9hWE11Ym05SWIzWmxja2hoYm1Sc1pYSXVZbWx1WkNoMGFHbHpLU2s3WEc0Z0lDQWdkR2hwY3k1bGJHVnRMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMk5zYVdOckp5d2dkR2hwY3k1amFHRnVaMlZRY21WemMyVmtSbUZqWlM1aWFXNWtLSFJvYVhNcEtUdGNiaUFnZlNCY2JseHVJQ0J3ZFdKc2FXTWdjMlYwUkdsellXSnNaU2dwT2lCMmIybGtJSHRjYmlBZ0lDQjBhR2x6TG1selJHbHpZV0pzWlNBOUlIUnlkV1U3WEc0Z0lDQWdkR2hwY3k1bGJHVnRMbk4wZVd4bExtSmhZMnRuY205MWJtUkpiV0ZuWlNBOUlHQjFjbXdvSkh0MGFHbHpMbTF2WkdVdVpHbHpZV0pzWlgwcFlEdGNiaUFnSUNCMGFHbHpMbVZzWlcwdWMyVjBRWFIwY21saWRYUmxLQ2RrYVhOaFlteGxaQ2NzSUNka2FYTmhZbXhsWkNjcE8xeHVJQ0FnSUhSb2FYTXVaV3hsYlM1emRIbHNaUzVqZFhKemIzSWdQU0FuYm05MExXRnNiRzkzWldRbk8xeHVJQ0I5WEc1Y2JpQWdjSFZpYkdsaklISmxiVzkyWlVScGMyRmliR1VvS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdkR2hwY3k1cGMwUnBjMkZpYkdVZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0IwYUdsekxtVnNaVzB1YzNSNWJHVXVZbUZqYTJkeWIzVnVaRWx0WVdkbElEMGdZSFZ5YkNna2UzUm9hWE11Ylc5a1pTNXViM0p0WVd4OUtXQTdYRzRnSUNBZ2RHaHBjeTVsYkdWdExuSmxiVzkyWlVGMGRISnBZblYwWlNnblpHbHpZV0pzWldRbktUdGNiaUFnSUNCMGFHbHpMbVZzWlcwdWMzUjViR1V1WTNWeWMyOXlJRDBnSjNCdmFXNTBaWEluTzF4dUlDQjlYRzVjYmlBZ2NIVmliR2xqSUhObGRDQmpiR2xqYTBoaGJtUnNaWElvYkdsemRHVnVaWEk2SUVWMlpXNTBUR2x6ZEdWdVpYSXBJSHRjYmlBZ0lDQnBaaUFvSVNGMGFHbHpMbU5zYVdOclNHRnVaR3hsY2taMWJtTXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVpXeGxiUzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUhSb2FYTXVZMnhwWTJ0SVlXNWtiR1Z5Um5WdVl5azdYRzRnSUNBZ2ZTQmNiaUFnSUNCMGFHbHpMbU5zYVdOclNHRnVaR3hsY2taMWJtTWdQU0JzYVhOMFpXNWxjanRjYmlBZ0lDQjBhR2x6TG1Wc1pXMHVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMnhwWTJzbkxDQjBhR2x6TG1Oc2FXTnJTR0Z1Wkd4bGNrWjFibU1wTzF4dUlDQjlYRzVjYmlBZ2NISnBkbUYwWlNCcGJtbDBLQ2s2SUhadmFXUWdlMXh1SUNBZ0lIUm9hWE11Wld4bGJTNXpkSGxzWlM1M2FXUjBhQ0E5SUNjNE1IQjRKenRjYmlBZ0lDQjBhR2x6TG1Wc1pXMHVjM1I1YkdVdWFHVnBaMmgwSUQwZ0p6Z3djSGduTzF4dUlDQWdJSFJvYVhNdVpXeGxiUzV6ZEhsc1pTNWliM0prWlhJZ1BTQW5ibTl1WlNjN1hHNGdJQ0FnZEdocGN5NWxiR1Z0TG5OMGVXeGxMbUp2Y21SbGNsSmhaR2wxY3lBOUlDYzFNQ1VuTzF4dUlDQWdJSFJvYVhNdVpXeGxiUzV6ZEhsc1pTNXZkWFJzYVc1bFYybGtkR2dnUFNBbk1DYzdYRzRnSUNBZ2RHaHBjeTVsYkdWdExuTjBlV3hsTG1OMWNuTnZjaUE5SUNkd2IybHVkR1Z5Snp0Y2JpQWdJQ0IwYUdsekxtVnNaVzB1YzNSNWJHVXVZbUZqYTJkeWIzVnVaRkJ2YzJsMGFXOXVJRDBnSnpVd0pTQTFNQ1VuTzF4dUlDQWdJSFJvYVhNdVpXeGxiUzV6ZEhsc1pTNWlZV05yWjNKdmRXNWtVbVZ3WldGMElEMGdKMjV2TFhKbGNHVmhkQ2M3WEc0Z0lDQWdkR2hwY3k1bGJHVnRMbk4wZVd4bExtSmhZMnRuY205MWJtUkpiV0ZuWlNBOUlHQjFjbXdvSkh0MGFHbHpMbTF2WkdVdWJtOXliV0ZzZlNsZ08xeHVJQ0I5WEc1Y2JpQWdjSEpwZG1GMFpTQmphR0Z1WjJWUWNtVnpjMlZrUm1GalpTaGxkbVZ1ZERvZ1RXOTFjMlZGZG1WdWRDazZJSFp2YVdRZ2UxeHVJQ0FnSUhSb2FYTXVaV3hsYlM1emRIbHNaUzVpWVdOclozSnZkVzVrU1cxaFoyVWdQU0JnZFhKc0tDUjdkR2hwY3k1dGIyUmxMbkJ5WlhOemZTbGdPMXh1SUNCOVhHNWNiaUFnY0hKcGRtRjBaU0JvYjNabGNraGhibVJzWlhJb1pYWmxiblE2SUUxdmRYTmxSWFpsYm5RcE9pQjJiMmxrSUh0Y2JpQWdJQ0JwWmlBb0lYUm9hWE11YVhORWFYTmhZbXhsS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbVZzWlcwdWMzUjViR1V1WW1GamEyZHliM1Z1WkVsdFlXZGxJRDBnWUhWeWJDZ2tlM1JvYVhNdWJXOWtaUzVvYjNabGNuMHBZRHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J3Y21sMllYUmxJRzV2U0c5MlpYSklZVzVrYkdWeUtHVjJaVzUwT2lCTmIzVnpaVVYyWlc1MEtUb2dkbTlwWkNCN1hHNGdJQ0FnZEdocGN5NWxiR1Z0TG5OMGVXeGxMbUpoWTJ0bmNtOTFibVJKYldGblpTQTlJSFJvYVhNdWFYTkVhWE5oWW14bElEOGdZSFZ5YkNna2UzUm9hWE11Ylc5a1pTNWthWE5oWW14bGZTbGdJRG9nWUhWeWJDZ2tlM1JvYVhNdWJXOWtaUzV1YjNKdFlXeDlLV0E3WEc0Z0lIMWNibHh1ZlNJc0ltbHRjRzl5ZENBcUlHRnpJRXhwWWlCbWNtOXRJQ2N1TDJ4cFlpYzdYRzVwYlhCdmNuUWdleUJDZFhSMGIyNGdmU0JtY205dElDY3VMMkoxZEhSdmJpYzdYRzVwYlhCdmNuUWdleUJDYjJGeVpDQjlJR1p5YjIwZ0p5NHZZbTloY21Rbk8xeHVhVzF3YjNKMElIc2dVMjkxYm1RZ2ZTQm1jbTl0SUNjdUwzTnZkVzVrSnp0Y2JseHVLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQmpiMjV6ZENCd2NtOWpaWE56VTI5MWJtUWdQU0J1WlhjZ1UyOTFibVFvSjIxbFpHbGhMMUpsWld4ZlUzQnBiaTV0Y0RNbktUdGNiaUFnWTI5dWMzUWdjM1J2Y0ZOdmRXNWtJRDBnYm1WM0lGTnZkVzVrS0NkdFpXUnBZUzlNWVc1a2FXNW5YekV1YlhBekp5azdYRzVjYmlBZ1kyOXVjM1FnYldGcGJpQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0p5NXdiR0ZqWlNjcE8xeHVJQ0JqYjI1emRDQnlaV1p5WlhOb1FuUnVJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25JM0psWm5KbGMyZ25LVHRjYmlBZ1kyOXVjM1FnWW5WMElEMGdibVYzSUVKMWRIUnZiaWduWW5WMGRHOXVKeWs3WEc0Z0lHTnZibk4wSUdKdllYSmtJRDBnYm1WM0lFSnZZWEprS0RVc0lEUXNJRzFoYVc0cE8xeHVYRzRnSUhKbFpuSmxjMmhDZEc0dVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENBb0tTQTlQaUI3WEc0Z0lDQWdZbTloY21RdWNtVm1jbVZ6YUNncE8xeHVJQ0I5S1R0Y2JseHVJQ0JpZFhRdVkyeHBZMnRJWVc1a2JHVnlJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lHSjFkQzV6WlhSRWFYTmhZbXhsS0NrN1hHNGdJQ0FnY21WbWNtVnphRUowYmk1elpYUkJkSFJ5YVdKMWRHVW9KMlJwYzJGaWJHVmtKeXdnSjJScGMyRmliR1ZrSnlrN1hHNGdJQ0FnS0hKbFpuSmxjMmhDZEc0Z1lYTWdTRlJOVEVKMWRIUnZia1ZzWlcxbGJuUXBMbk4wZVd4bExtTjFjbk52Y2lBOUlDZHViM1F0WVd4c2IzZGxaQ2M3WEc0Z0lDQWdjSEp2WTJWemMxTnZkVzVrTG5Cc1lYa29LVHRjYmx4dUlDQWdJR052Ym5OMElHTnZkVzUwSUQwZ1RHbGlMbkpoYm1SdmJVbHVkQ2cxTENBeU1DazdYRzRnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLR0RRbXRDKzBMc3QwTExRdmlEUmdkQzQwTHpRc3RDKzBMdlF2dEN5SU5DLzBZRFF2dEM2MFlEUmc5R0MwTHJRdURvZ0pIdGpiM1Z1ZEgxZ0tUdGNibHh1SUNBZ0lHSnZZWEprTG5KMWJpaGpiM1Z1ZENsY2JpQWdJQ0FnSUM1MGFHVnVLSEpsY3lBOVBpQjdYRzRnSUNBZ0lDQWdJSEJ5YjJObGMzTlRiM1Z1WkM1emRHOXdLQ2s3WEc0Z0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lITjBiM0JUYjNWdVpDNXdiR0Y1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdZblYwTG5KbGJXOTJaVVJwYzJGaWJHVW9LVHRjYmlBZ0lDQWdJQ0FnSUNCeVpXWnlaWE5vUW5SdUxuSmxiVzkyWlVGMGRISnBZblYwWlNnblpHbHpZV0pzWldRbktUdGNiaUFnSUNBZ0lDQWdJQ0FvY21WbWNtVnphRUowYmlCaGN5QklWRTFNUW5WMGRHOXVSV3hsYldWdWRDa3VjM1I1YkdVdVkzVnljMjl5SUQwZ0ozQnZhVzUwWlhJbk8xeHVJQ0FnSUNBZ0lDQjlMQ0ExTUNrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnZlR0Y2JpQWdYRzU5S1NncE95SXNJaThxS2x4dUlDb2cwWVRSZzlDOTBMclJodEM0MFk4ZzBMN1F1dEdBMFlQUXM5QzcwTFhRdmRDNDBZOGcwWUVnMExmUXNOQzAwTERRdmRDOTBMN1F1U0RSZ3RDKzBZZlF2ZEMrMFlIUmd0R00wWTVjYmlBcUlFQndZWEpoYlNCdWRXMGdlMjUxYldKbGNuMGdMU0RRdnRDNjBZRFJnOUN6MEx2Umo5QzEwTHpRdnRDMUlOR0gwTGpSZ2RDNzBMNWNiaUFxSUVCd1lYSmhiU0J3Y21WamFYTnBiMjRnZTI1MWJXSmxjbjBnTFNEUmd0QyswWWZRdmRDKzBZSFJndEdNSU5DKzBMclJnTkdEMExQUXU5QzEwTDNRdU5HUElDalF1dEMrMEx2UXVOR0gwTFhSZ2RHQzBMTFF2aURRdDlDOTBMRFF1dEMrMExJZzBML1F2dEdCMEx2UXRTRFF0OUN3MEwvUmo5R0MwTDdRdVZ4dUlDb2cwWVBRdXRDdzBMZlJpOUN5MExEUXRkR0MwWUhSanlEUmdkQytJTkMzMEwzUXNOQzYwTDdRdkNCY0lpMWNJaWxjYmlBcUlFQnlaWFIxY200Z2UyNTFiV0psY24wZ0xTRFJnZEM2MEw3UmdOR0EwTFhRdXRHQzBMalJnTkMrMExMUXNOQzkwTDNRc05HUElOQyswTHJSZ05HRDBMUFF1OUMxMEwzUXZkQ3cwWThnMExUUXRkR0IwWS9SZ3RDNDBZZlF2ZEN3MFk4ZzBMVFJnTkMrMExIUmpGeHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnY205MWJtUW9iblZ0T2lCdWRXMWlaWElzSUhCeVpXTnBjM05wYjI0NklHNTFiV0psY2lrNklHNTFiV0psY2lCN1hHNGdJQzh2SU5DaDBMVFFzdEM0MExNZzBZRFFzTkMzMFlEUmo5QzAwTDdRc2x4dUlDQnNaWFFnZEcxd1RuVnRPbUZ1ZVNBOUlHNTFiUzUwYjFOMGNtbHVaeWdwTG5Od2JHbDBLQ2RsSnlrN1hHNGdJSFJ0Y0U1MWJTQTlJRTFoZEdndWNtOTFibVFvS3loMGJYQk9kVzFiTUYwZ0t5QW5aU2NnS3lBb2RHMXdUblZ0V3pGZElEOGdLQ3QwYlhCT2RXMWJNVjBnTFNCd2NtVmphWE56YVc5dUtTQTZJQzF3Y21WamFYTnphVzl1S1NrcE8xeHVJQ0F2THlEUW50Q3gwWURRc05HQzBMM1JpOUM1SU5HQjBMVFFzdEM0MExOY2JpQWdkRzF3VG5WdElEMGdkRzF3VG5WdExuUnZVM1J5YVc1bktDa3VjM0JzYVhRb0oyVW5LVHRjYmlBZ2NtVjBkWEp1SUNzb2RHMXdUblZ0V3pCZElDc2dKMlVuSUNzZ0tIUnRjRTUxYlZzeFhTQS9JQ2dyZEcxd1RuVnRXekZkSUMxY2JpQWdLeUJ3Y21WamFYTnphVzl1S1NBNklIQnlaV05wYzNOcGIyNHBLVHRjYm4xY2JseHVMeW9xWEc0Z0tpRFJoTkdEMEwzUXV0R0cwTGpSanlEUXM5QzEwTDNRdGRHQTBMRFJodEM0MExnZzBZYlF0ZEM3MEw3UXM5QytJTkdIMExqUmdkQzcwTEFnMExqUXR5RFF0TkM0MExEUXY5Q3cwTGZRdnRDOTBMQmNiaUFxSUVCd1lYSmhiU0J0YVc0Z2UyNTFiV0psY24xY2JpQXFJRUJ3WVhKaGJTQnRZWGdnZTI1MWJXSmxjbjFjYmlBcUlFQnlaWFIxY200Z2UyNTFiV0psY24xY2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSEpoYm1SdmJVbHVkQ2h0YVc0NklHNTFiV0psY2l3Z2JXRjRPaUJ1ZFcxaVpYSXBPaUJ1ZFcxaVpYSWdlMXh1SUNCc1pYUWdjbTVrSUQwZ2JXbHVJQ3NnVFdGMGFDNXlZVzVrYjIwb0tTb2dLRzFoZUNBcklERWdMU0J0YVc0cE8xeHVJQ0J5Ym1RZ1BTQk5ZWFJvTG1ac2IyOXlLSEp1WkNrN1hHNGdJSEpsZEhWeWJpQnlibVE3WEc1OUlpd2lhVzF3YjNKMElDb2dZWE1nVEdsaUlHWnliMjBnSnk0dmJHbGlKenRjYmx4dVpYaHdiM0owSUdOc1lYTnpJRk5vYjNkVGNuWWdlMXh1SUNCalpXeHNVMmw2WlRvZ2RHVnpkQzVUYVhwbE8xeHVJQ0JqWld4c1EyOXZjbVE2SUhSbGMzUXVRMjl2Y21SelcxMWJYVHRjYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaUFvWEc0Z0lDQWdjSEpwZG1GMFpTQndZWEpsYm5SRmJHVnRPaUJGYkdWdFpXNTBMRnh1SUNBZ0lIQnlhWFpoZEdVZ1kyOXZjbVE2SUhSbGMzUXVRMjl2Y21SekxGeHVJQ0FnSUhCeWFYWmhkR1VnYzJsNlpUb2dkR1Z6ZEM1VGFYcGxMRnh1SUNBZ0lIQnlhWFpoZEdVZ2NYUTZJSFJsYzNRdVFXMTBYRzRnSUNrZ2UxeHVJQ0FnSUhSb2FYTXVhVzVwZENncE8xeHVJQ0I5WEc1Y2JpQWdjSEpwZG1GMFpTQnBibWwwS0NrNklIWnZhV1FnZTF4dUlDQWdJSFJvYVhNdVkyVnNiRk5wZW1VZ1BTQjdYRzRnSUNBZ0lDQjNhV1IwYURvZ1RHbGlMbkp2ZFc1a0tIUm9hWE11YzJsNlpTNTNhV1IwYUNBdklIUm9hWE11Y1hRdVkyOXNkVzF1TENBd0tTeGNiaUFnSUNBZ0lHaGxhV2RvZERvZ1RHbGlMbkp2ZFc1a0tIUm9hWE11YzJsNlpTNW9aV2xuYUhRZ0x5QjBhR2x6TG5GMExuSnZkeXdnTUNsY2JpQWdJQ0I5TzF4dUlDQWdJSFJvYVhNdVkyVnNiRU52YjNKa0lEMGdXMTA3WEc0Z0lDQWdabTl5SUNoc1pYUWdlQ0E5SURBN0lIZ2dQQ0IwYUdsekxuRjBMbU52YkhWdGJqc2dlQ3NyS1NCN1hHNGdJQ0FnSUNCc1pYUWdkRzF3UTI5c2RXMXVPaUI3ZURvZ2JuVnRZbVZ5TENCNU9pQnVkVzFpWlhKOVcxMGdQU0JiWFR0Y2JpQWdJQ0FnSUdadmNpQW9iR1YwSUhrZ1BTQXdPeUI1SUR3Z2RHaHBjeTV4ZEM1eWIzYzdJSGtyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnWTNWeWNtVnVkRU5sYkd4RGIyOXlaQ0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQjRPaUI0SUNvZ2RHaHBjeTVqWld4c1UybDZaUzUzYVdSMGFDeGNiaUFnSUNBZ0lDQWdJQ0I1T2lCMGFHbHpMbk5wZW1VdWFHVnBaMmgwSUMwZ0tIa2dLeUF4S1NBcUlIUm9hWE11WTJWc2JGTnBlbVV1YUdWcFoyaDBYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUhSdGNFTnZiSFZ0Ymk1d2RYTm9LR04xY25KbGJuUkRaV3hzUTI5dmNtUXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkR2hwY3k1alpXeHNRMjl2Y21RdWNIVnphQ2gwYlhCRGIyeDFiVzRwTzF4dUlDQWdJSDFjYmlBZ0lDQXZMeUJqYjI1emIyeGxMbXh2WnloMGFHbHpMbU5sYkd4RGIyOXlaQ2s3WEc0Z0lIMWNibHh1SUNCd2RXSnNhV01nYzJodmQwUmhkR0VvWkdGMFlUb2diblZ0WW1WeVcxMWJYU2s2SUhadmFXUWdmQ0JpYjI5c1pXRnVJSHRjYmlBZ0lDQnBaaUFvWkdGMFlTNXNaVzVuZEdnZ0lUMDlJSFJvYVhNdWNYUXVZMjlzZFcxdUtTQjdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0dEUW10QyswTHZRdU5HSDBMWFJnZEdDMExMUXZpRFJnZEdDMFlEUXZ0QzZJTkN5SU5DLzBMWFJnTkMxMExUUXNOQ3kwTERRdGRDODBZdlJoU0RRdE5DNzBZOGcwTDdSZ3RDKzBMSFJnTkN3MExiUXRkQzkwTGpSanlEUXROQ3cwTDNRdmRHTDBZVWdLQ1I3WkdGMFlTNXNaVzVuZEdoOUtTd2cwTC9SZ05DMTBMTFJpOUdJMExEUXRkR0NJTkM2MEw3UXU5QzQwWWZRdGRHQjBZTFFzdEMrSU5HQjBZTFJnTkMrMExvZzBML1JnTkM0SU5DNDBMM1F1TkdHMExqUXNOQzcwTGpRdDlDdzBZYlF1TkM0SU5DNjBMdlFzTkdCMFlIUXNDQlRhRzkzSUNna2UzUm9hWE11Y1hRdWNtOTNmU2xnS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9aR0YwWVZzd1hTNXNaVzVuZEdnZ0lUMDlJSFJvYVhNdWNYUXVjbTkzS1NCN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLR0RRbXRDKzBMdlF1TkdIMExYUmdkR0MwTExRdmlEUmdkR0MwTDdRdTlDeDBZYlF2dEN5SU5DeUlOQy8wTFhSZ05DMTBMVFFzTkN5MExEUXRkQzgwWXZSaFNEUXROQzcwWThnMEw3Umd0QyswTEhSZ05DdzBMYlF0ZEM5MExqUmp5RFF0TkN3MEwzUXZkR0wwWVVnS0NSN1pHRjBZVnN3WFM1c1pXNW5kR2g5S1N3ZzBML1JnTkMxMExMUmk5R0kwTERRdGRHQ0lOQzYwTDdRdTlDNDBZZlF0ZEdCMFlMUXN0QytJTkdCMFlMUXZ0QzcwTEhSaHRDKzBMSWcwTC9SZ05DNElOQzQwTDNRdU5HRzBMalFzTkM3MExqUXQ5Q3cwWWJRdU5DNElOQzYwTHZRc05HQjBZSFFzQ0JUYUc5M0lDZ2tlM1JvYVhNdWNYUXVZMjlzZFcxdWZTbGdLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxtTnNaV0Z1Uld4bGJXVnVkQ2gwYUdsekxuQmhjbVZ1ZEVWc1pXMHBPMXh1SUNBZ0lHWnZjaUFvYkdWMElIZ2dQU0F3T3lCNElEd2dkR2hwY3k1eGRDNWpiMngxYlc0N0lIZ3JLeWtnZTF4dUlDQWdJQ0FnWm05eUlDaHNaWFFnZVNBOUlEQTdJSGtnUENCMGFHbHpMbkYwTG5KdmR6c2dlU3NyS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JqWld4c1JXeGxiU0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMlJwZGljcE8xeHVJQ0FnSUNBZ0lDQmpaV3hzUld4bGJTNXpkSGxzWlM1d2IzTnBkR2x2YmlBOUlDZGhZbk52YkhWMFpTYzdYRzRnSUNBZ0lDQWdJR05sYkd4RmJHVnRMbk4wZVd4bExuZHBaSFJvSUQwZ1lDUjdkR2hwY3k1alpXeHNVMmw2WlM1M2FXUjBhSDF3ZUdBN1hHNGdJQ0FnSUNBZ0lHTmxiR3hGYkdWdExuTjBlV3hsTG1obGFXZG9kQ0E5SUdBa2UzUm9hWE11WTJWc2JGTnBlbVV1YUdWcFoyaDBmWEI0WUR0Y2JpQWdJQ0FnSUNBZ1kyVnNiRVZzWlcwdWMzUjViR1V1ZEc5d0lEMGdZQ1I3ZEdocGN5NWpaV3hzUTI5dmNtUmJlRjFiZVYwdWVYMXdlR0E3WEc0Z0lDQWdJQ0FnSUdObGJHeEZiR1Z0TG5OMGVXeGxMbXhsWm5RZ1BTQmdKSHQwYUdsekxtTmxiR3hEYjI5eVpGdDRYVnQ1WFM1NGZYQjRZRHRjYmlBZ0lDQWdJQ0FnYkdWMElIQmhkR2dnUFNCZ2JXVmthV0V2Skhzb1pHRjBZVnQ0WFZ0NVhTQThJREV3S1NBL0lDY3dKeUFySUdSaGRHRmJlRjFiZVYwZ09pQmtZWFJoVzNoZFczbGRmUzV3Ym1kZ08xeHVJQ0FnSUNBZ0lDQmpaV3hzUld4bGJTNXpkSGxzWlM1aVlXTnJaM0p2ZFc1a1VHOXphWFJwYjI0Z1BTQW5OVEFsSURVd0pTYzdYRzRnSUNBZ0lDQWdJR05sYkd4RmJHVnRMbk4wZVd4bExtSmhZMnRuY205MWJtUlNaWEJsWVhRZ1BTQW5ibTh0Y21Wd1pXRjBKenRjYmlBZ0lDQWdJQ0FnWTJWc2JFVnNaVzB1YzNSNWJHVXVZbUZqYTJkeWIzVnVaRk5wZW1VZ1BTQW5ZMjl1ZEdGcGJpYzdYRzRnSUNBZ0lDQWdJR05sYkd4RmJHVnRMbk4wZVd4bExtSmhZMnRuY205MWJtUkpiV0ZuWlNBOUlHQjFjbXdvSkh0d1lYUm9mU2xnTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbkJoY21WdWRFVnNaVzB1WVhCd1pXNWtRMmhwYkdRb1kyVnNiRVZzWlcwcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpRFF2dEdIMExqUmdkR0MwTHJRc0NCY0l0R0EwTDdRdE5DNDBZTFF0ZEM3MFk5Y0lpRFF2dEdDSU5DeTBZSFF0U0RRdE5DKzBZZlF0ZEdBMEwzUXVOR0ZJTkdOMEx2UXRkQzgwTFhRdmRHQzBMN1FzbHh1SUNBZ0tpQkFjR0Z5WVcwZ1pXeGxiU0I3Uld4bGJXVnVkSDFjYmlBZ0lDb3ZYRzRnSUhCeWFYWmhkR1VnWTJ4bFlXNUZiR1Z0Wlc1MEtHVnNaVzA2SUVWc1pXMWxiblFwT2lCMmIybGtJSHRjYmlBZ0lDQjNhR2xzWlNBb1pXeGxiUzVqYUdsc1pFNXZaR1Z6V3pCZEtTQjdYRzRnSUNBZ0lDQmxiR1Z0TG5KbGJXOTJaVU5vYVd4a0tHVnNaVzB1WTJocGJHUk9iMlJsYzFzd1hTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JseHVmU0lzSW1WNGNHOXlkQ0JqYkdGemN5QlRiM1Z1WkNCN1hHNGdJSEJ5YVhaaGRHVWdZMjl1ZEdWNGREb2dRWFZrYVc5RGIyNTBaWGgwTzF4dUlDQndjbWwyWVhSbElHSjFabVpsY2pvZ1FYVmthVzlDZFdabVpYSTdYRzRnSUhCeWFYWmhkR1VnYzI5MWNtTmxPaUJCZFdScGIwSjFabVpsY2xOdmRYSmpaVTV2WkdVN1hHNGdJSEJ5YVhaaGRHVWdaR1Z6ZEdsdVlYUnBiMjQ2SUVGMVpHbHZSR1Z6ZEdsdVlYUnBiMjVPYjJSbE8xeHVYRzRnSUdOdmJuTjBjblZqZEc5eUlDaGNiaUFnSUNCd2NtbDJZWFJsSUhCaGRHaEdhV3hsT2lCemRISnBibWRjYmlBZ0tTQjdYRzRnSUNBZ2RHaHBjeTVwYm1sMEtDazdYRzRnSUgxY2JpQWdYRzRnSUhCeWFYWmhkR1VnYVc1cGRDZ3BPaUIyYjJsa0lIdGNiaUFnSUNCMGFHbHpMbU52Ym5SbGVIUWdQU0J1WlhjZ1FYVmthVzlEYjI1MFpYaDBLQ2s3WEc0Z0lDQWdkR2hwY3k1c2IyRmtVMjkxYm1SR2FXeGxLQ2s3WEc0Z0lIMWNibHh1SUNCd2NtbDJZWFJsSUd4dllXUlRiM1Z1WkVacGJHVW9LVG9nZG05cFpDQjdYRzRnSUNBZ2JHVjBJSGhvY2lBOUlHNWxkeUJZVFV4SWRIUndVbVZ4ZFdWemRDZ3BPMXh1SUNBZ0lIaG9jaTV2Y0dWdUtDZEhSVlFuTENCMGFHbHpMbkJoZEdoR2FXeGxMQ0IwY25WbEtUdGNiaUFnSUNCNGFISXVjbVZ6Y0c5dWMyVlVlWEJsSUQwZ0oyRnljbUY1WW5WbVptVnlKenRjYmlBZ0lDQjRhSEl1YjI1c2IyRmtJRDBnS0dWMktTQTlQaUI3WEc0Z0lDQWdJQ0JzWlhRZ2NtVnpJRDBnZUdoeUxuSmxjM0J2Ym5ObE8xeHVJQ0FnSUNBZ2RHaHBjeTVqYjI1MFpYaDBMbVJsWTI5a1pVRjFaR2x2UkdGMFlTaHlaWE1zSUNoa1pXTnZaR1ZrUVhKeVlYbENkV1ptWlhJcElEMCtJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWlkV1ptWlhJZ1BTQmtaV052WkdWa1FYSnlZWGxDZFdabVpYSTdYRzRnSUNBZ0lDQjlMQ0FvWlhKeUtTQTlQaUI3SUdOdmJuTnZiR1V1WlhKeWIzSW9aWEp5S1RzZ2ZTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhob2NpNXpaVzVrS0NrN1hHNGdJSDFjYmx4dUlDQndkV0pzYVdNZ2NHeGhlU2dwT2lCMmIybGtJSHRjYmlBZ0lDQjBhR2x6TG5OdmRYSmpaU0E5SUhSb2FYTXVZMjl1ZEdWNGRDNWpjbVZoZEdWQ2RXWm1aWEpUYjNWeVkyVW9LVHRjYmlBZ0lDQjBhR2x6TG5OdmRYSmpaUzVpZFdabVpYSWdQU0IwYUdsekxtSjFabVpsY2p0Y2JpQWdJQ0IwYUdsekxtUmxjM1JwYm1GMGFXOXVJRDBnZEdocGN5NWpiMjUwWlhoMExtUmxjM1JwYm1GMGFXOXVPMXh1SUNBZ0lIUm9hWE11YzI5MWNtTmxMbU52Ym01bFkzUW9kR2hwY3k1a1pYTjBhVzVoZEdsdmJpazdYRzRnSUNBZ2RHaHBjeTV6YjNWeVkyVXVjM1JoY25Rb01DazdYRzRnSUgxY2JseHVJQ0J3ZFdKc2FXTWdjM1J2Y0NncE9pQjJiMmxrSUh0Y2JpQWdJQ0IwYUdsekxuTnZkWEpqWlM1emRHOXdLREFwTzF4dUlDQjlYRzVjYm4waVhYMD0ifQ==
