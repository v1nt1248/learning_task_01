(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Board = (function () {
    function Board(qt) {
        this.qt = qt;
        this.cardsMap = [];
        this.init();
    }
    Board.prototype.init = function () {
        for (var x = 0; x < this.qt; x++) {
            var qtN = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            var tmpColumn = [];
            while (tmpColumn.length < 30) {
                var tmp = this.randomInt(1, 10);
                if (qtN[tmp - 1] < 3) {
                    tmpColumn.push(tmp);
                    qtN[tmp - 1] += 1;
                }
            }
            this.cardsMap.push(tmpColumn);
        }
    };
    Board.prototype.randomInt = function (min, max) {
        var rnd = min + Math.random() * (max + 1 - min);
        rnd = Math.floor(rnd);
        return rnd;
    };
    Board.prototype.getCards = function () {
        return this.cardsMap;
    };
    Board.prototype.showingData = function (row) {
        var result = [];
        for (var i = 0; i < this.qt; i++) {
            var tmp = this.cardsMap[i].slice(0, row);
            result.push(tmp);
        }
        return result;
    };
    return Board;
}());
exports.Board = Board;


},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Button = (function () {
    function Button(id) {
        this.id = id;
        this.mode = {
            normal: './media/btn_spin_normal.png',
            hover: './media/btn_spin_hover.png',
            disable: './media/btn_spin_disable.png',
            press: './media/btn_spin_pressed.png'
        };
        this.elem = document.querySelector("#" + id);
        this.isDisable = false;
        this.init();
        this.elem.addEventListener('mouseover', this.hoverHandler.bind(this));
        this.elem.addEventListener('mouseout', this.noHoverHandler.bind(this));
        this.elem.addEventListener('click', this.changePressedFace.bind(this));
    }
    Button.prototype.setDisable = function () {
        this.isDisable = true;
        this.elem.style.backgroundImage = "url(" + this.mode.disable + ")";
    };
    Button.prototype.removeDisable = function () {
        this.isDisable = false;
        this.elem.style.backgroundImage = "url(" + this.mode.normal + ")";
    };
    Object.defineProperty(Button.prototype, "clickHandler", {
        set: function (listener) {
            if (!!this.clickHandlerFunc) {
                this.elem.removeEventListener('click', this.clickHandlerFunc);
            }
            this.clickHandlerFunc = listener;
            this.elem.addEventListener('click', this.clickHandlerFunc);
        },
        enumerable: true,
        configurable: true
    });
    Button.prototype.init = function () {
        this.elem.style.width = '80px';
        this.elem.style.height = '80px';
        this.elem.style.border = 'none';
        this.elem.style.borderRadius = '50%';
        this.elem.style.outlineWidth = '0';
        this.elem.style.cursor = 'pointer';
        this.elem.style.backgroundPosition = '50% 50%';
        this.elem.style.backgroundRepeat = 'no-repeat';
        this.elem.style.backgroundImage = "url(" + this.mode.normal + ")";
    };
    Button.prototype.changePressedFace = function (event) {
        this.elem.style.backgroundImage = "url(" + this.mode.press + ")";
    };
    Button.prototype.hoverHandler = function (event) {
        if (!this.isDisable) {
            this.elem.style.backgroundImage = "url(" + this.mode.hover + ")";
        }
    };
    Button.prototype.noHoverHandler = function (event) {
        this.elem.style.backgroundImage = this.isDisable ? "url(" + this.mode.disable + ")" : "url(" + this.mode.normal + ")";
    };
    return Button;
}());
exports.Button = Button;


},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var button_1 = require("./button");
var board_1 = require("./board");
var show_1 = require("./show");
(function () {
    var cardsPath = './media/';
    var main = document.querySelector('.place');
    var mainCoord = {
        x: main.clientLeft,
        y: main.clientTop,
        width: main.clientWidth,
        height: main.clientHeight
    };
    // const app = new PIXI.Application(1050, 560, {backgroundColor: 0xFFECB3});
    // main.appendChild(app.view);
    var but = new button_1.Button('button');
    var board = new board_1.Board(5);
    console.log(JSON.stringify(board.getCards()));
    console.log(JSON.stringify(board.showingData(4), null, 2));
    // but.clickHandler = () => {
    //   console.log('click');
    // }
    var show = new show_1.ShowSrv(main, { x: mainCoord.x, y: mainCoord.y }, { width: mainCoord.width, height: mainCoord.height }, { column: 5, row: 4 });
    show.showData(board.showingData(4));
})();


},{"./board":1,"./button":2,"./show":5}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * функция округления с заданной точностью
 * @param num {number} - округляемое число
 * @param precision {number} - точность округления (количество знаков после запятой
 * указывается со знаком "-")
 * @return {number} - скорректированная округленная десятичная дробь
 */
function round(num, precission) {
    // Сдвиг разрядов
    var tmpNum = num.toString().split('e');
    tmpNum = Math.round(+(tmpNum[0] + 'e' + (tmpNum[1] ? (+tmpNum[1] - precission) : -precission)));
    // Обратный сдвиг
    tmpNum = tmpNum.toString().split('e');
    return +(tmpNum[0] + 'e' + (tmpNum[1] ? (+tmpNum[1] -
        +precission) : precission));
}
exports.round = round;
;


},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Lib = require("./lib");
var ShowSrv = (function () {
    function ShowSrv(parentElem, coord, size, qt) {
        this.parentElem = parentElem;
        this.coord = coord;
        this.size = size;
        this.qt = qt;
        this.init();
    }
    ShowSrv.prototype.init = function () {
        this.cellSize = {
            width: Lib.round(this.size.width / this.qt.column, 0),
            height: Lib.round(this.size.height / this.qt.row, 0)
        };
        this.cellCoord = [];
        for (var x = 0; x < this.qt.column; x++) {
            var tmpColumn = [];
            for (var y = 0; y < this.qt.row; y++) {
                var currentCellCoord = {
                    x: x * this.cellSize.width,
                    y: this.size.height - (y + 1) * this.cellSize.height
                };
                tmpColumn.push(currentCellCoord);
            }
            this.cellCoord.push(tmpColumn);
        }
        console.log(this.cellCoord);
    };
    ShowSrv.prototype.showData = function (data) {
        if (data.length !== this.qt.column) {
            console.error("\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0441\u0442\u0440\u043E\u043A \u0432 \u043F\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043C\u044B\u0445 \u0434\u043B\u044F \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F \u0434\u0430\u043D\u043D\u044B\u0445 (" + data.length + "), \u043F\u0440\u0435\u0432\u044B\u0448\u0430\u0435\u0442 \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0441\u0442\u0440\u043E\u043A \u043F\u0440\u0438 \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438 \u043A\u043B\u0430\u0441\u0441\u0430 Show (" + this.qt.row + ")");
            return false;
        }
        if (data[0].length !== this.qt.row) {
            console.error("\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0441\u0442\u043E\u043B\u0431\u0446\u043E\u0432 \u0432 \u043F\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043C\u044B\u0445 \u0434\u043B\u044F \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F \u0434\u0430\u043D\u043D\u044B\u0445 (" + data[0].length + "), \u043F\u0440\u0435\u0432\u044B\u0448\u0430\u0435\u0442 \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0441\u0442\u043E\u043B\u0431\u0446\u043E\u0432 \u043F\u0440\u0438 \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438 \u043A\u043B\u0430\u0441\u0441\u0430 Show (" + this.qt.column + ")");
            return false;
        }
        this.cleanElement(this.parentElem);
        for (var x = 0; x < this.qt.column; x++) {
            for (var y = 0; y < this.qt.row; y++) {
                var cellElem = document.createElement('div');
                cellElem.style.position = 'absolute';
                cellElem.style.width = this.cellSize.width + "px";
                cellElem.style.height = this.cellSize.height + "px";
                cellElem.style.border = '1px solid rgba(0, 0, 0, 0.12)';
                cellElem.style.top = this.cellCoord[x][y].y + "px";
                cellElem.style.left = this.cellCoord[x][y].x + "px";
                cellElem.style.textAlign = 'center';
                cellElem.style.lineHeight = this.cellSize.height + "px";
                cellElem.style.fontSize = '32px';
                cellElem.style.fontWeight = 'bold';
                cellElem.innerHTML = "" + data[x][y];
                this.parentElem.appendChild(cellElem);
            }
        }
    };
    /**
     * очистка "родителя" от все дочерних элементов
     * @param elem {Element}
     */
    ShowSrv.prototype.cleanElement = function (elem) {
        while (elem.childNodes[0]) {
            elem.removeChild(elem.childNodes[0]);
        }
    };
    return ShowSrv;
}());
exports.ShowSrv = ShowSrv;


},{"./lib":4}]},{},[3])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
