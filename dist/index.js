(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Lib = require("./lib");
const show_1 = require("./show");
class Board {
    constructor(column, row, place) {
        this.column = column;
        this.row = row;
        this.place = place;
        this.init();
        this.placeCoord = {
            x: this.place.clientLeft,
            y: this.place.clientTop,
            width: this.place.clientWidth,
            height: this.place.clientHeight
        };
        this.show = new show_1.ShowSrv(this.place, { x: this.placeCoord.x, y: this.placeCoord.y }, { width: this.placeCoord.width, height: this.placeCoord.height }, { column: this.column, row: this.row });
        this.animate();
    }
    init() {
        this.cardsMap = [];
        for (let x = 0; x < this.column; x++) {
            let qtN = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            let tmpColumn = [];
            while (tmpColumn.length < 30) {
                const tmp = Lib.randomInt(1, 10);
                if (qtN[tmp - 1] < 3) {
                    tmpColumn.push(tmp);
                    qtN[tmp - 1] += 1;
                }
            }
            this.cardsMap.push(tmpColumn);
        }
        // console.log(this.cardsMap);
    }
    showingData() {
        let result = [];
        for (let i = 0; i < this.column; i++) {
            let tmp = this.cardsMap[i].slice(0, this.row);
            result.push(tmp);
        }
        return result;
    }
    tick(column) {
        if (column <= this.column) {
            let first = this.cardsMap[column - 1].shift();
            this.cardsMap[column - 1].push(first);
        }
    }
    animate() {
        this.show.showData(this.showingData());
    }
    refresh() {
        this.init();
        this.animate();
    }
    run(qt) {
        let promise = new Promise((resolve, reject) => {
            let count = 0;
            let timer = setInterval(() => {
                let from = Math.floor(count / qt) + 1;
                for (let i = from; i <= this.column; i++) {
                    this.tick(i);
                }
                this.animate();
                count += 1;
                if (count >= (qt * this.column)) {
                    clearInterval(timer);
                    resolve(true);
                }
            }, 40);
        });
        return promise.then(res => {
            return true;
        });
        // let count = 0;
        // let timer = setInterval(() => {
        //   let from = Math.floor(count / qt) + 1;
        //   for (let i = from; i <= this.column; i++) {
        //     this.tick(i);
        //   }
        //   this.animate();
        //   count += 1;
        //   if (count >= (qt * this.column)) {
        //     clearInterval(timer);
        //     return;
        //   }
        // }, 60);
    }
}
exports.Board = Board;


},{"./lib":4,"./show":5}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Button {
    constructor(id) {
        this.id = id;
        this.mode = {
            normal: './media/btn_spin_normal.png',
            hover: './media/btn_spin_hover.png',
            disable: './media/btn_spin_disable.png',
            press: './media/btn_spin_pressed.png'
        };
        this.elem = document.querySelector(`#${id}`);
        this.isDisable = false;
        this.init();
        this.elem.addEventListener('mouseover', this.hoverHandler.bind(this));
        this.elem.addEventListener('mouseout', this.noHoverHandler.bind(this));
        this.elem.addEventListener('click', this.changePressedFace.bind(this));
    }
    setDisable() {
        this.isDisable = true;
        this.elem.style.backgroundImage = `url(${this.mode.disable})`;
        this.elem.setAttribute('disabled', 'disabled');
        this.elem.style.cursor = 'not-allowed';
    }
    removeDisable() {
        this.isDisable = false;
        this.elem.style.backgroundImage = `url(${this.mode.normal})`;
        this.elem.removeAttribute('disabled');
        this.elem.style.cursor = 'pointer';
    }
    set clickHandler(listener) {
        if (!!this.clickHandlerFunc) {
            this.elem.removeEventListener('click', this.clickHandlerFunc);
        }
        this.clickHandlerFunc = listener;
        this.elem.addEventListener('click', this.clickHandlerFunc);
    }
    init() {
        this.elem.style.width = '80px';
        this.elem.style.height = '80px';
        this.elem.style.border = 'none';
        this.elem.style.borderRadius = '50%';
        this.elem.style.outlineWidth = '0';
        this.elem.style.cursor = 'pointer';
        this.elem.style.backgroundPosition = '50% 50%';
        this.elem.style.backgroundRepeat = 'no-repeat';
        this.elem.style.backgroundImage = `url(${this.mode.normal})`;
    }
    changePressedFace(event) {
        this.elem.style.backgroundImage = `url(${this.mode.press})`;
    }
    hoverHandler(event) {
        if (!this.isDisable) {
            this.elem.style.backgroundImage = `url(${this.mode.hover})`;
        }
    }
    noHoverHandler(event) {
        this.elem.style.backgroundImage = this.isDisable ? `url(${this.mode.disable})` : `url(${this.mode.normal})`;
    }
}
exports.Button = Button;


},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const button_1 = require("./button");
const board_1 = require("./board");
// import { Sound } from './sound';
(function () {
    // const processSound = new Sound('media/Reel_Spin.mp3');
    // const stopSound = new Sound('media/Landing_1.mp3');
    soundjs.Sound.registerSound("./media/Reel_Spin.mp3", 'sound', 4);
    const main = document.querySelector('.place');
    const refreshBtn = document.querySelector('#refresh');
    const but = new button_1.Button('button');
    const board = new board_1.Board(5, 4, main);
    refreshBtn.addEventListener('click', () => {
        board.refresh();
    });
    but.clickHandler = () => {
        but.setDisable();
        refreshBtn.setAttribute('disabled', 'disabled');
        refreshBtn.style.cursor = 'not-allowed';
        // processSound.play();
        board.run(10)
            .then(res => {
            // processSound.stop();
            // stopSound.play();
            but.removeDisable();
            refreshBtn.removeAttribute('disabled');
            refreshBtn.style.cursor = 'pointer';
        });
    };
})();


},{"./board":1,"./button":2}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * функция округления с заданной точностью
 * @param num {number} - округляемое число
 * @param precision {number} - точность округления (количество знаков после запятой
 * указывается со знаком "-")
 * @return {number} - скорректированная округленная десятичная дробь
 */
function round(num, precission) {
    // Сдвиг разрядов
    let tmpNum = num.toString().split('e');
    tmpNum = Math.round(+(tmpNum[0] + 'e' + (tmpNum[1] ? (+tmpNum[1] - precission) : -precission)));
    // Обратный сдвиг
    tmpNum = tmpNum.toString().split('e');
    return +(tmpNum[0] + 'e' + (tmpNum[1] ? (+tmpNum[1] -
        +precission) : precission));
}
exports.round = round;
/**
 * функция генерации целого числа из диапазона
 * @param min {number}
 * @param max {number}
 * @return {number}
 */
function randomInt(min, max) {
    let rnd = min + Math.random() * (max + 1 - min);
    rnd = Math.floor(rnd);
    return rnd;
}
exports.randomInt = randomInt;


},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Lib = require("./lib");
class ShowSrv {
    constructor(parentElem, coord, size, qt) {
        this.parentElem = parentElem;
        this.coord = coord;
        this.size = size;
        this.qt = qt;
        this.init();
    }
    init() {
        this.cellSize = {
            width: Lib.round(this.size.width / this.qt.column, 0),
            height: Lib.round(this.size.height / this.qt.row, 0)
        };
        this.cellCoord = [];
        for (let x = 0; x < this.qt.column; x++) {
            let tmpColumn = [];
            for (let y = 0; y < this.qt.row; y++) {
                let currentCellCoord = {
                    x: x * this.cellSize.width,
                    y: this.size.height - (y + 1) * this.cellSize.height
                };
                tmpColumn.push(currentCellCoord);
            }
            this.cellCoord.push(tmpColumn);
        }
        // console.log(this.cellCoord);
    }
    showData(data) {
        if (data.length !== this.qt.column) {
            console.error(`Количество строк в передаваемых для отображения данных (${data.length}), превышает количество строк при инициализации класса Show (${this.qt.row})`);
            return false;
        }
        if (data[0].length !== this.qt.row) {
            console.error(`Количество столбцов в передаваемых для отображения данных (${data[0].length}), превышает количество столбцов при инициализации класса Show (${this.qt.column})`);
            return false;
        }
        this.cleanElement(this.parentElem);
        for (let x = 0; x < this.qt.column; x++) {
            for (let y = 0; y < this.qt.row; y++) {
                let cellElem = document.createElement('div');
                cellElem.style.position = 'absolute';
                cellElem.style.width = `${this.cellSize.width}px`;
                cellElem.style.height = `${this.cellSize.height}px`;
                // cellElem.style.border = '1px solid rgba(0, 0, 0, 0.12)';
                cellElem.style.top = `${this.cellCoord[x][y].y}px`;
                cellElem.style.left = `${this.cellCoord[x][y].x}px`;
                let path = `media/${(data[x][y] < 10) ? '0' + data[x][y] : data[x][y]}.png`;
                cellElem.style.backgroundPosition = '50% 50%';
                cellElem.style.backgroundRepeat = 'no-repeat';
                cellElem.style.backgroundSize = 'contain';
                cellElem.style.backgroundImage = `url(${path})`;
                this.parentElem.appendChild(cellElem);
            }
        }
    }
    /**
     * очистка "родителя" от все дочерних элементов
     * @param elem {Element}
     */
    cleanElement(elem) {
        while (elem.childNodes[0]) {
            elem.removeChild(elem.childNodes[0]);
        }
    }
}
exports.ShowSrv = ShowSrv;


},{"./lib":4}]},{},[3])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
